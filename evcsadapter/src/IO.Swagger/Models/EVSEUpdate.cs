/*
 * Charging Station Monitoring API
 *
 * Single endpoint to receive bulk updates from a Charging Station Management System (CSMS). The server is expected to update its internal database based on the differential changes in the data and respond with a list of load curves (one per charging station). A call to this endpoint is made as soon as new data is available or if not data is available on a set interval. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EVSEUpdate : IEquatable<EVSEUpdate>
    { 
        /// <summary>
        /// Unique identifier of the EVSE within the Charging Station. 
        /// </summary>
        /// <value>Unique identifier of the EVSE within the Charging Station. </value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Operational status of the EVSE.   - **Unknown**: The CSMS does not know the status of this EVSE.   - **Available**: Not occupied, can be used for a new charging session.   - **Occupied**: An EV is connected, but not necessarily charging yet.   - **Charging**: An EV is connected and actively receiving power.   - **SuspendedEVSE**: EV is connected, but power is suspended by the EVSE (e.g., load balancing).   - **SuspendedEV**: EV is connected, but power is suspended by the EV (vehicle not ready).   - **Reserved**: This EVSE is reserved for a specific user and cannot be used by others.   - **Maintenance**: EVSE is offline for maintenance and not available for new sessions.   - **Faulted**: There is a problem with the EVSE preventing operation. 
        /// </summary>
        /// <value>Operational status of the EVSE.   - **Unknown**: The CSMS does not know the status of this EVSE.   - **Available**: Not occupied, can be used for a new charging session.   - **Occupied**: An EV is connected, but not necessarily charging yet.   - **Charging**: An EV is connected and actively receiving power.   - **SuspendedEVSE**: EV is connected, but power is suspended by the EVSE (e.g., load balancing).   - **SuspendedEV**: EV is connected, but power is suspended by the EV (vehicle not ready).   - **Reserved**: This EVSE is reserved for a specific user and cannot be used by others.   - **Maintenance**: EVSE is offline for maintenance and not available for new sessions.   - **Faulted**: There is a problem with the EVSE preventing operation. </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum UnknownEnum for Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            UnknownEnum = 0,
            /// <summary>
            /// Enum AvailableEnum for Available
            /// </summary>
            [EnumMember(Value = "Available")]
            AvailableEnum = 1,
            /// <summary>
            /// Enum OccupiedEnum for Occupied
            /// </summary>
            [EnumMember(Value = "Occupied")]
            OccupiedEnum = 2,
            /// <summary>
            /// Enum ChargingEnum for Charging
            /// </summary>
            [EnumMember(Value = "Charging")]
            ChargingEnum = 3,
            /// <summary>
            /// Enum SuspendedEVSEEnum for SuspendedEVSE
            /// </summary>
            [EnumMember(Value = "SuspendedEVSE")]
            SuspendedEVSEEnum = 4,
            /// <summary>
            /// Enum SuspendedEVEnum for SuspendedEV
            /// </summary>
            [EnumMember(Value = "SuspendedEV")]
            SuspendedEVEnum = 5,
            /// <summary>
            /// Enum ReservedEnum for Reserved
            /// </summary>
            [EnumMember(Value = "Reserved")]
            ReservedEnum = 6,
            /// <summary>
            /// Enum MaintenanceEnum for Maintenance
            /// </summary>
            [EnumMember(Value = "Maintenance")]
            MaintenanceEnum = 7,
            /// <summary>
            /// Enum FaultedEnum for Faulted
            /// </summary>
            [EnumMember(Value = "Faulted")]
            FaultedEnum = 8        }

        /// <summary>
        /// Operational status of the EVSE.   - **Unknown**: The CSMS does not know the status of this EVSE.   - **Available**: Not occupied, can be used for a new charging session.   - **Occupied**: An EV is connected, but not necessarily charging yet.   - **Charging**: An EV is connected and actively receiving power.   - **SuspendedEVSE**: EV is connected, but power is suspended by the EVSE (e.g., load balancing).   - **SuspendedEV**: EV is connected, but power is suspended by the EV (vehicle not ready).   - **Reserved**: This EVSE is reserved for a specific user and cannot be used by others.   - **Maintenance**: EVSE is offline for maintenance and not available for new sessions.   - **Faulted**: There is a problem with the EVSE preventing operation. 
        /// </summary>
        /// <value>Operational status of the EVSE.   - **Unknown**: The CSMS does not know the status of this EVSE.   - **Available**: Not occupied, can be used for a new charging session.   - **Occupied**: An EV is connected, but not necessarily charging yet.   - **Charging**: An EV is connected and actively receiving power.   - **SuspendedEVSE**: EV is connected, but power is suspended by the EVSE (e.g., load balancing).   - **SuspendedEV**: EV is connected, but power is suspended by the EV (vehicle not ready).   - **Reserved**: This EVSE is reserved for a specific user and cannot be used by others.   - **Maintenance**: EVSE is offline for maintenance and not available for new sessions.   - **Faulted**: There is a problem with the EVSE preventing operation. </value>
        [Required]

        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// List of meter measurements (0..*) reported for this EVSE
        /// </summary>
        /// <value>List of meter measurements (0..*) reported for this EVSE</value>
        [Required]

        [DataMember(Name="electric_meter")]
        public List<Measurement> ElectricMeter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EVSEUpdate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ElectricMeter: ").Append(ElectricMeter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EVSEUpdate)obj);
        }

        /// <summary>
        /// Returns true if EVSEUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of EVSEUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EVSEUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    ElectricMeter == other.ElectricMeter ||
                    ElectricMeter != null &&
                    ElectricMeter.SequenceEqual(other.ElectricMeter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (ElectricMeter != null)
                    hashCode = hashCode * 59 + ElectricMeter.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EVSEUpdate left, EVSEUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EVSEUpdate left, EVSEUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
