/*
 * CHESS data elements for the HVAC / PV data from Aveva-pi
 *
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// A CHESS data element for PV / HVAC time series data 
    /// </summary>
    [DataContract]
    public partial class CHESSDataElement : IEquatable<CHESSDataElement>
    { 
        /// <summary>
        /// Reference to the Data Element
        /// </summary>
        /// <value>Reference to the Charging Station ID</value>
        [Required]

        [DataMember(Name="timestamp")]
        public String timestamp { get; set; }
        [DataMember(Name = "value")]
        public String value { get; set; }
        [DataMember(Name = "uom")]
        public String uom { get; set; }

        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CHESSDataElement {\n");
            sb.Append("  timestamp: ").Append(timestamp).Append("\n");
            sb.Append("  value: ").Append(value).Append("\n");
            sb.Append("  uom: ").Append(uom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CHESSDataElement)obj);
        }

        /// <summary>
        /// Returns true if CHESSDataElement instances are equal
        /// </summary>
        /// <param name="other">Instance of CHESSDataElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CHESSDataElement other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    timestamp == other.timestamp ||
                    timestamp != null &&
                    timestamp.Equals(other.timestamp)
                ) && 
                (
                    value == other.value ||
                    value != null &&
                    value.Equals(other.value)
                ) && 
                (
                    uom == other.uom ||
                    uom != null &&
                    uom.SequenceEqual(other.uom)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (timestamp != null)
                    hashCode = hashCode * 59 + timestamp.GetHashCode();
                    if (value != null)
                    hashCode = hashCode * 59 + value.GetHashCode();
                    if (uom != null)
                    hashCode = hashCode * 59 + uom.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CHESSDataElement left, CHESSDataElement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CHESSDataElement left, CHESSDataElement right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
