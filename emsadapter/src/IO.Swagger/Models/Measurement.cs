/*
 * Charging Station Monitoring API
 *
 * Single endpoint to receive bulk updates from a Charging Station Management System (CSMS). The server is expected to update its internal database based on the differential changes in the data and respond with a list of load curves (one per charging station). A call to this endpoint is made as soon as new data is available or if not data is available on a set interval. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Azure.DigitalTwins.Core;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Meter reading or measurement data, such as current import/export, voltage, power, energy, etc. 
    /// </summary>
    [DataContract]
    public partial class Measurement : BasicDigitalTwin, IEquatable<Measurement>
    {


        public Measurement()
        {
            Metadata.ModelId = ModelId;
        }
        [JsonIgnore]
        public static new string ModelId { get; } = "dtmi:com:flexchess:der:meter:measurements;1";


        /// <summary>
        /// The exact timestamp when the measurement was taken. 
        /// </summary>
        /// <value>The exact timestamp when the measurement was taken. </value>
        [Required]

        [DataMember(Name = "timestamp")]
        public DateTime? timestamp { get; set; }

        /// <summary>
        /// True if the measurement is taken at configured clock-aligned intervals. 
        /// </summary>
        /// <value>True if the measurement is taken at configured clock-aligned intervals. </value>

        [DataMember(Name = "clock_aligned")]
        public bool? clockAligned { get; set; } = false;

        /// <summary>
        /// Maximum overall current offered to EV (in A)
        /// </summary>
        /// <value>Maximum overall current offered to EV (in A)</value>

        [DataMember(Name = "current_offered")]
        public decimal? currentOffered { get; set; } = 0;

        /// <summary>
        /// Maximum overall power offered to EV (in W)
        /// </summary>
        /// <value>Maximum overall power offered to EV (in W)</value>

        [DataMember(Name = "power_offered")]
        public decimal? powerOffered { get; set; } = 0;

        /// <summary>
        /// Instantaneous overall current flowing to EV (A)
        /// </summary>
        /// <value>Instantaneous overall current flowing to EV (A)</value>

        [DataMember(Name = "current_import")]
        public decimal? currentImport { get; set; } = 0;

        /// <summary>
        /// Instantaneous current on Neutral (A)
        /// </summary>
        /// <value>Instantaneous current on Neutral (A)</value>

        [DataMember(Name = "current_import_n")]
        public decimal? currentImportN { get; set; } = 0;

        /// <summary>
        /// Instantaneous current on L1 (A)
        /// </summary>
        /// <value>Instantaneous current on L1 (A)</value>

        [DataMember(Name = "current_import_l1")]
        public decimal? currentImportL1 { get; set; } = 0;

        /// <summary>
        /// Instantaneous current on L2 (A)
        /// </summary>
        /// <value>Instantaneous current on L2 (A)</value>

        [DataMember(Name = "current_import_l2")]
        public decimal? currentImportL2 { get; set; } = 0;

        /// <summary>
        /// Instantaneous current on L3 (A)
        /// </summary>
        /// <value>Instantaneous current on L3 (A)</value>

        [DataMember(Name = "current_import_l3")]
        public decimal? currentImportL3 { get; set; } = 0;

        /// <summary>
        /// Instantaneous active power imported by EV (W)
        /// </summary>
        /// <value>Instantaneous active power imported by EV (W)</value>

        [DataMember(Name = "power_active_import")]
        public decimal? powerActiveImport { get; set; } = 0;

        /// <summary>
        /// Instantaneous active power on L1 (W)
        /// </summary>
        /// <value>Instantaneous active power on L1 (W)</value>

        [DataMember(Name = "power_active_import_l1")]
        public decimal? powerActiveImportL1 { get; set; } = 0;

        /// <summary>
        /// Instantaneous active power on L2 (W)
        /// </summary>
        /// <value>Instantaneous active power on L2 (W)</value>

        [DataMember(Name = "power_active_import_l2")]
        public decimal? powerActiveImportL2 { get; set; } = 0;

        /// <summary>
        /// Instantaneous active power on L3 (W)
        /// </summary>
        /// <value>Instantaneous active power on L3 (W)</value>

        [DataMember(Name = "power_active_import_l3")]
        public decimal? powerActiveImportL3 { get; set; } = 0;

        /// <summary>
        /// Instantaneous reactive power imported (VAR)
        /// </summary>
        /// <value>Instantaneous reactive power imported (VAR)</value>

        [DataMember(Name = "power_reactive_import")]
        public decimal? powerReactiveImport { get; set; } = 0;

        /// <summary>
        /// Instantaneous reactive power on L1 (VAR)
        /// </summary>
        /// <value>Instantaneous reactive power on L1 (VAR)</value>

        [DataMember(Name = "power_reactive_import_l1")]
        public decimal? powerReactiveImportL1 { get; set; } = 0;

        /// <summary>
        /// Instantaneous reactive power on L2 (VAR)
        /// </summary>
        /// <value>Instantaneous reactive power on L2 (VAR)</value>

        [DataMember(Name = "power_reactive_import_l2")]
        public decimal? powerReactiveImportL2 { get; set; } = 0;

        /// <summary>
        /// Instantaneous reactive power on L3 (VAR)
        /// </summary>
        /// <value>Instantaneous reactive power on L3 (VAR)</value>

        [DataMember(Name = "power_reactive_import_l3")]
        public decimal? powerReactiveImportL3 { get; set; } = 0;

        /// <summary>
        /// Cumulative active electrical energy imported (Wh)
        /// </summary>
        /// <value>Cumulative active electrical energy imported (Wh)</value>

        [DataMember(Name = "energy_active_import_register")]
        public decimal? energyActiveImportRegister { get; set; } = 0;

        /// <summary>
        /// Cumulative active energy on L1 (Wh)
        /// </summary>
        /// <value>Cumulative active energy on L1 (Wh)</value>

        [DataMember(Name = "energy_active_import_register_l1")]
        public decimal? energyActiveImportRegisterL1 { get; set; } = 0;

        /// <summary>
        /// Cumulative active energy on L2 (Wh)
        /// </summary>
        /// <value>Cumulative active energy on L2 (Wh)</value>

        [DataMember(Name = "energy_active_import_register_l2")]
        public decimal? energyActiveImportRegisterL2 { get; set; } = 0;

        /// <summary>
        /// Cumulative active energy on L3 (Wh)
        /// </summary>
        /// <value>Cumulative active energy on L3 (Wh)</value>

        [DataMember(Name = "energy_active_import_register_l3")]
        public decimal? energyActiveImportRegisterL3 { get; set; } = 0;

        /// <summary>
        /// Interval-based active energy imported (Wh)
        /// </summary>
        /// <value>Interval-based active energy imported (Wh)</value>

        [DataMember(Name = "energy_active_import_interval")]
        public decimal? energyActiveImportInterval { get; set; } = 0;

        /// <summary>
        /// Interval-based active energy on L1 (Wh)
        /// </summary>
        /// <value>Interval-based active energy on L1 (Wh)</value>

        [DataMember(Name = "energy_active_import_interval_l1")]
        public decimal? energyActiveImportIntervalL1 { get; set; } = 0;

        /// <summary>
        /// Interval-based active energy on L2 (Wh)
        /// </summary>
        /// <value>Interval-based active energy on L2 (Wh)</value>

        [DataMember(Name = "energy_active_import_interval_l2")]
        public decimal? energyActiveImportIntervalL2 { get; set; } = 0;

        /// <summary>
        /// Interval-based active energy on L3 (Wh)
        /// </summary>
        /// <value>Interval-based active energy on L3 (Wh)</value>

        [DataMember(Name = "energy_active_import_interval_l3")]
        public decimal? energyActiveImportIntervalL3 { get; set; } = 0;

        /// <summary>
        /// Cumulative reactive energy imported (VARh)
        /// </summary>
        /// <value>Cumulative reactive energy imported (VARh)</value>

        [DataMember(Name = "energy_reactive_import_register")]
        public decimal? energyReactiveImportRegister { get; set; } = 0;

        /// <summary>
        /// Reactive energy on L1 (VARh)
        /// </summary>
        /// <value>Reactive energy on L1 (VARh)</value>

        [DataMember(Name = "energy_reactive_import_register_l1")]
        public decimal? energyReactiveImportRegisterL1 { get; set; } = 0;

        /// <summary>
        /// Reactive energy on L2 (VARh)
        /// </summary>
        /// <value>Reactive energy on L2 (VARh)</value>

        [DataMember(Name = "energy_reactive_import_register_l2")]
        public decimal? energyReactiveImportRegisterL2 { get; set; } = 0;

        /// <summary>
        /// Reactive energy on L3 (VARh)
        /// </summary>
        /// <value>Reactive energy on L3 (VARh)</value>

        [DataMember(Name = "energy_reactive_import_register_l3")]
        public decimal? energyReactiveImportRegisterL3 { get; set; } = 0;

        /// <summary>
        /// Interval-based reactive energy imported (VARh)
        /// </summary>
        /// <value>Interval-based reactive energy imported (VARh)</value>

        [DataMember(Name = "energy_reactive_import_interval")]
        public decimal? energyReactiveImportInterval { get; set; } = 0;

        /// <summary>
        /// Interval-based reactive energy on L1 (VARh)
        /// </summary>
        /// <value>Interval-based reactive energy on L1 (VARh)</value>

        [DataMember(Name = "energy_reactive_import_interval_l1")]
        public decimal? energyReactiveImportIntervalL1 { get; set; } = 0;

        /// <summary>
        /// Interval-based reactive energy on L2 (VARh)
        /// </summary>
        /// <value>Interval-based reactive energy on L2 (VARh)</value>

        [DataMember(Name = "energy_reactive_import_interval_l2")]
        public decimal? energyReactiveImportIntervalL2 { get; set; } = 0;

        /// <summary>
        /// Interval-based reactive energy on L3 (VARh)
        /// </summary>
        /// <value>Interval-based reactive energy on L3 (VARh)</value>

        [DataMember(Name = "energy_reactive_import_interval_l3")]
        public decimal? energyReactiveImportIntervalL3 { get; set; } = 0;

        /// <summary>
        /// Instantaneous overall current flowing from EV (A)
        /// </summary>
        /// <value>Instantaneous overall current flowing from EV (A)</value>

        [DataMember(Name = "current_export")]
        public decimal? currentExport { get; set; } = 0;

        /// <summary>
        /// Instantaneous current flow from EV on Neutral (A)
        /// </summary>
        /// <value>Instantaneous current flow from EV on Neutral (A)</value>

        [DataMember(Name = "current_export_n")]
        public decimal? currentExportN { get; set; } = 0;

        /// <summary>
        /// Instantaneous current flow from EV on L1 (A)
        /// </summary>
        /// <value>Instantaneous current flow from EV on L1 (A)</value>

        [DataMember(Name = "current_export_l1")]
        public decimal? currentExportL1 { get; set; } = 0;

        /// <summary>
        /// Instantaneous current flow from EV on L2 (A)
        /// </summary>
        /// <value>Instantaneous current flow from EV on L2 (A)</value>

        [DataMember(Name = "current_export_l2")]
        public decimal? currentExportL2 { get; set; } = 0;

        /// <summary>
        /// Instantaneous current flow from EV on L3 (A)
        /// </summary>
        /// <value>Instantaneous current flow from EV on L3 (A)</value>

        [DataMember(Name = "current_export_l3")]
        public decimal? currentExportL3 { get; set; } = 0;

        /// <summary>
        /// Instantaneous active power exported by EV (W)
        /// </summary>
        /// <value>Instantaneous active power exported by EV (W)</value>

        [DataMember(Name = "power_active_export")]
        public decimal? powerActiveExport { get; set; } = 0;

        /// <summary>
        /// Instantaneous active power on L1 (W)
        /// </summary>
        /// <value>Instantaneous active power on L1 (W)</value>

        [DataMember(Name = "power_active_export_l1")]
        public decimal? powerActiveExportL1 { get; set; } = 0;

        /// <summary>
        /// Instantaneous active power on L2 (W)
        /// </summary>
        /// <value>Instantaneous active power on L2 (W)</value>

        [DataMember(Name = "power_active_export_l2")]
        public decimal? powerActiveExportL2 { get; set; } = 0;

        /// <summary>
        /// Instantaneous active power on L3 (W)
        /// </summary>
        /// <value>Instantaneous active power on L3 (W)</value>

        [DataMember(Name = "power_active_export_l3")]
        public decimal? powerActiveExportL3 { get; set; } = 0;

        /// <summary>
        /// Instantaneous reactive power exported (VAR)
        /// </summary>
        /// <value>Instantaneous reactive power exported (VAR)</value>

        [DataMember(Name = "power_reactive_export")]
        public decimal? powerReactiveExport { get; set; } = 0;

        /// <summary>
        /// Instantaneous reactive power on L1 (VAR)
        /// </summary>
        /// <value>Instantaneous reactive power on L1 (VAR)</value>

        [DataMember(Name = "power_reactive_export_l1")]
        public decimal? powerReactiveExportL1 { get; set; } = 0;

        /// <summary>
        /// Instantaneous reactive power on L2 (VAR)
        /// </summary>
        /// <value>Instantaneous reactive power on L2 (VAR)</value>

        [DataMember(Name = "power_reactive_export_l2")]
        public decimal? powerReactiveExportL2 { get; set; } = 0;

        /// <summary>
        /// Instantaneous reactive power on L3 (VAR)
        /// </summary>
        /// <value>Instantaneous reactive power on L3 (VAR)</value>

        [DataMember(Name = "power_reactive_export_l3")]
        public decimal? powerReactiveExportL3 { get; set; } = 0;

        /// <summary>
        /// Cumulative active energy exported (Wh)
        /// </summary>
        /// <value>Cumulative active energy exported (Wh)</value>

        [DataMember(Name = "energy_active_export_register")]
        public decimal? energyActiveExportRegister { get; set; } = 0;

        /// <summary>
        /// Active energy exported on L1 (Wh)
        /// </summary>
        /// <value>Active energy exported on L1 (Wh)</value>

        [DataMember(Name = "energy_active_export_register_l1")]
        public decimal? energyActiveExportRegisterL1 { get; set; } = 0;

        /// <summary>
        /// Active energy exported on L2 (Wh)
        /// </summary>
        /// <value>Active energy exported on L2 (Wh)</value>

        [DataMember(Name = "energy_active_export_register_l2")]
        public decimal? energyActiveExportRegisterL2 { get; set; } = 0;

        /// <summary>
        /// Active energy exported on L3 (Wh)
        /// </summary>
        /// <value>Active energy exported on L3 (Wh)</value>

        [DataMember(Name = "energy_active_export_register_l3")]
        public decimal? energyActiveExportRegisterL3 { get; set; } = 0;

        /// <summary>
        /// Interval-based active energy exported (Wh)
        /// </summary>
        /// <value>Interval-based active energy exported (Wh)</value>

        [DataMember(Name = "energy_active_export_interval")]
        public decimal? energyActiveExportInterval { get; set; } = 0;

        /// <summary>
        /// Interval-based active energy exported on L1 (Wh)
        /// </summary>
        /// <value>Interval-based active energy exported on L1 (Wh)</value>

        [DataMember(Name = "energy_active_export_interval_l1")]
        public decimal? energyActiveExportIntervalL1 { get; set; } = 0;

        /// <summary>
        /// Interval-based active energy exported on L2 (Wh)
        /// </summary>
        /// <value>Interval-based active energy exported on L2 (Wh)</value>

        [DataMember(Name = "energy_active_export_interval_l2")]
        public decimal? energyActiveExportIntervalL2 { get; set; } = 0;

        /// <summary>
        /// Interval-based active energy exported on L3 (Wh)
        /// </summary>
        /// <value>Interval-based active energy exported on L3 (Wh)</value>

        [DataMember(Name = "energy_active_export_interval_l3")]
        public decimal? energyActiveExportIntervalL3 { get; set; } = 0;

        /// <summary>
        /// Cumulative reactive energy exported (VARh)
        /// </summary>
        /// <value>Cumulative reactive energy exported (VARh)</value>

        [DataMember(Name = "energy_reactive_export_register")]
        public decimal? energyReactiveExportRegister { get; set; } = 0;

        /// <summary>
        /// Reactive energy exported on L1 (VARh)
        /// </summary>
        /// <value>Reactive energy exported on L1 (VARh)</value>

        [DataMember(Name = "energy_reactive_export_register_l1")]
        public decimal? energyReactiveExportRegisterL1 { get; set; } = 0;

        /// <summary>
        /// Reactive energy exported on L2 (VARh)
        /// </summary>
        /// <value>Reactive energy exported on L2 (VARh)</value>

        [DataMember(Name = "energy_reactive_export_register_l2")]
        public decimal? energyReactiveExportRegisterL2 { get; set; } = 0;

        /// <summary>
        /// Reactive energy exported on L3 (VARh)
        /// </summary>
        /// <value>Reactive energy exported on L3 (VARh)</value>

        [DataMember(Name = "energy_reactive_export_register_l3")]
        public decimal? energyReactiveExportRegisterL3 { get; set; } = 0;

        /// <summary>
        /// Interval-based reactive energy exported (VARh)
        /// </summary>
        /// <value>Interval-based reactive energy exported (VARh)</value>

        [DataMember(Name = "energy_reactive_export_interval")]
        public decimal? energyReactiveExportInterval { get; set; } = 0;

        /// <summary>
        /// Interval-based reactive energy exported on L1 (VARh)
        /// </summary>
        /// <value>Interval-based reactive energy exported on L1 (VARh)</value>

        [DataMember(Name = "energy_reactive_export_interval_l1")]
        public decimal? energyReactiveExportIntervalL1 { get; set; } = 0;

        /// <summary>
        /// Interval-based reactive energy exported on L2 (VARh)
        /// </summary>
        /// <value>Interval-based reactive energy exported on L2 (VARh)</value>

        [DataMember(Name = "energy_reactive_export_interval_l2")]
        public decimal? energyReactiveExportIntervalL2 { get; set; } = 0;

        /// <summary>
        /// Interval-based reactive energy exported on L3 (VARh)
        /// </summary>
        /// <value>Interval-based reactive energy exported on L3 (VARh)</value>

        [DataMember(Name = "energy_reactive_export_interval_l3")]
        public decimal? energyReactiveExportIntervalL3 { get; set; } = 0;

        /// <summary>
        /// Instantaneous DC supply voltage (V) or AC RMS (phase unknown)
        /// </summary>
        /// <value>Instantaneous DC supply voltage (V) or AC RMS (phase unknown)</value>

        [DataMember(Name = "voltage")]
        public decimal? voltage { get; set; } = 0;

        /// <summary>
        /// AC RMS voltage between L1 and N (V)
        /// </summary>
        /// <value>AC RMS voltage between L1 and N (V)</value>

        [DataMember(Name = "voltage_l1_n")]
        public decimal? voltageL1N { get; set; } = 0;

        /// <summary>
        /// AC RMS voltage between L2 and N (V)
        /// </summary>
        /// <value>AC RMS voltage between L2 and N (V)</value>

        [DataMember(Name = "voltage_l2_n")]
        public decimal? voltageL2N { get; set; } = 0;

        /// <summary>
        /// AC RMS voltage between L3 and N (V)
        /// </summary>
        /// <value>AC RMS voltage between L3 and N (V)</value>

        [DataMember(Name = "voltage_l3_n")]
        public decimal? voltageL3N { get; set; } = 0;

        /// <summary>
        /// AC RMS voltage between L1 and L2 (V)
        /// </summary>
        /// <value>AC RMS voltage between L1 and L2 (V)</value>

        [DataMember(Name = "voltage_l1_l2")]
        public decimal? voltageL1L2 { get; set; } = 0;

        /// <summary>
        /// AC RMS voltage between L2 and L3 (V)
        /// </summary>
        /// <value>AC RMS voltage between L2 and L3 (V)</value>

        [DataMember(Name = "voltage_l2_l3")]
        public decimal? voltageL2L3 { get; set; } = 0;

        /// <summary>
        /// AC RMS voltage between L3 and L1 (V)
        /// </summary>
        /// <value>AC RMS voltage between L3 and L1 (V)</value>

        [DataMember(Name = "voltage_l3_l1")]
        public decimal? voltageL3L1 { get; set; } = 0;

        /// <summary>
        /// power line frequency (Hz)
        /// </summary>
        /// <value>power line frequency (Hz)</value>

        [DataMember(Name = "frequency")]
        public decimal? frequency { get; set; } = 0;

        /// <summary>
        /// Instantaneous overall power factor (−1 to 1)
        /// </summary>
        /// <value>Instantaneous overall power factor (−1 to 1)</value>

        [DataMember(Name = "power_factor")]
        public decimal? powerFactor { get; set; } = 0;

        /// <summary>
        /// power factor on L1 (−1 to 1)
        /// </summary>
        /// <value>power factor on L1 (−1 to 1)</value>

        [DataMember(Name = "power_factor_l1")]
        public decimal? powerFactorL1 { get; set; } = 0;

        /// <summary>
        /// power factor on L2 (−1 to 1)
        /// </summary>
        /// <value>power factor on L2 (−1 to 1)</value>

        [DataMember(Name = "power_factor_l2")]
        public decimal? powerFactorL2 { get; set; } = 0;

        /// <summary>
        /// power factor on L3 (−1 to 1)
        /// </summary>
        /// <value>power factor on L3 (−1 to 1)</value>

        [DataMember(Name = "power_factor_l3")]
        public decimal? powerFactorL3 { get; set; } = 0;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Measurement {\n");
            sb.Append("  timestamp: ").Append(timestamp).Append("\n");
            sb.Append("  clockAligned: ").Append(clockAligned).Append("\n");
            sb.Append("  currentOffered: ").Append(currentOffered).Append("\n");
            sb.Append("  powerOffered: ").Append(powerOffered).Append("\n");
            sb.Append("  currentImport: ").Append(currentImport).Append("\n");
            sb.Append("  currentImportN: ").Append(currentImportN).Append("\n");
            sb.Append("  currentImportL1: ").Append(currentImportL1).Append("\n");
            sb.Append("  currentImportL2: ").Append(currentImportL2).Append("\n");
            sb.Append("  currentImportL3: ").Append(currentImportL3).Append("\n");
            sb.Append("  powerActiveImport: ").Append(powerActiveImport).Append("\n");
            sb.Append("  powerActiveImportL1: ").Append(powerActiveImportL1).Append("\n");
            sb.Append("  powerActiveImportL2: ").Append(powerActiveImportL2).Append("\n");
            sb.Append("  powerActiveImportL3: ").Append(powerActiveImportL3).Append("\n");
            sb.Append("  powerReactiveImport: ").Append(powerReactiveImport).Append("\n");
            sb.Append("  powerReactiveImportL1: ").Append(powerReactiveImportL1).Append("\n");
            sb.Append("  powerReactiveImportL2: ").Append(powerReactiveImportL2).Append("\n");
            sb.Append("  powerReactiveImportL3: ").Append(powerReactiveImportL3).Append("\n");
            sb.Append("  energyActiveImportRegister: ").Append(energyActiveImportRegister).Append("\n");
            sb.Append("  energyActiveImportRegisterL1: ").Append(energyActiveImportRegisterL1).Append("\n");
            sb.Append("  energyActiveImportRegisterL2: ").Append(energyActiveImportRegisterL2).Append("\n");
            sb.Append("  energyActiveImportRegisterL3: ").Append(energyActiveImportRegisterL3).Append("\n");
            sb.Append("  energyActiveImportInterval: ").Append(energyActiveImportInterval).Append("\n");
            sb.Append("  energyActiveImportIntervalL1: ").Append(energyActiveImportIntervalL1).Append("\n");
            sb.Append("  energyActiveImportIntervalL2: ").Append(energyActiveImportIntervalL2).Append("\n");
            sb.Append("  energyActiveImportIntervalL3: ").Append(energyActiveImportIntervalL3).Append("\n");
            sb.Append("  energyReactiveImportRegister: ").Append(energyReactiveImportRegister).Append("\n");
            sb.Append("  energyReactiveImportRegisterL1: ").Append(energyReactiveImportRegisterL1).Append("\n");
            sb.Append("  energyReactiveImportRegisterL2: ").Append(energyReactiveImportRegisterL2).Append("\n");
            sb.Append("  energyReactiveImportRegisterL3: ").Append(energyReactiveImportRegisterL3).Append("\n");
            sb.Append("  energyReactiveImportInterval: ").Append(energyReactiveImportInterval).Append("\n");
            sb.Append("  energyReactiveImportIntervalL1: ").Append(energyReactiveImportIntervalL1).Append("\n");
            sb.Append("  energyReactiveImportIntervalL2: ").Append(energyReactiveImportIntervalL2).Append("\n");
            sb.Append("  energyReactiveImportIntervalL3: ").Append(energyReactiveImportIntervalL3).Append("\n");
            sb.Append("  currentExport: ").Append(currentExport).Append("\n");
            sb.Append("  currentExportN: ").Append(currentExportN).Append("\n");
            sb.Append("  currentExportL1: ").Append(currentExportL1).Append("\n");
            sb.Append("  currentExportL2: ").Append(currentExportL2).Append("\n");
            sb.Append("  currentExportL3: ").Append(currentExportL3).Append("\n");
            sb.Append("  powerActiveExport: ").Append(powerActiveExport).Append("\n");
            sb.Append("  powerActiveExportL1: ").Append(powerActiveExportL1).Append("\n");
            sb.Append("  powerActiveExportL2: ").Append(powerActiveExportL2).Append("\n");
            sb.Append("  powerActiveExportL3: ").Append(powerActiveExportL3).Append("\n");
            sb.Append("  powerReactiveExport: ").Append(powerReactiveExport).Append("\n");
            sb.Append("  powerReactiveExportL1: ").Append(powerReactiveExportL1).Append("\n");
            sb.Append("  powerReactiveExportL2: ").Append(powerReactiveExportL2).Append("\n");
            sb.Append("  powerReactiveExportL3: ").Append(powerReactiveExportL3).Append("\n");
            sb.Append("  energyActiveExportRegister: ").Append(energyActiveExportRegister).Append("\n");
            sb.Append("  energyActiveExportRegisterL1: ").Append(energyActiveExportRegisterL1).Append("\n");
            sb.Append("  energyActiveExportRegisterL2: ").Append(energyActiveExportRegisterL2).Append("\n");
            sb.Append("  energyActiveExportRegisterL3: ").Append(energyActiveExportRegisterL3).Append("\n");
            sb.Append("  energyActiveExportInterval: ").Append(energyActiveExportInterval).Append("\n");
            sb.Append("  energyActiveExportIntervalL1: ").Append(energyActiveExportIntervalL1).Append("\n");
            sb.Append("  energyActiveExportIntervalL2: ").Append(energyActiveExportIntervalL2).Append("\n");
            sb.Append("  energyActiveExportIntervalL3: ").Append(energyActiveExportIntervalL3).Append("\n");
            sb.Append("  energyReactiveExportRegister: ").Append(energyReactiveExportRegister).Append("\n");
            sb.Append("  energyReactiveExportRegisterL1: ").Append(energyReactiveExportRegisterL1).Append("\n");
            sb.Append("  energyReactiveExportRegisterL2: ").Append(energyReactiveExportRegisterL2).Append("\n");
            sb.Append("  energyReactiveExportRegisterL3: ").Append(energyReactiveExportRegisterL3).Append("\n");
            sb.Append("  energyReactiveExportInterval: ").Append(energyReactiveExportInterval).Append("\n");
            sb.Append("  energyReactiveExportIntervalL1: ").Append(energyReactiveExportIntervalL1).Append("\n");
            sb.Append("  energyReactiveExportIntervalL2: ").Append(energyReactiveExportIntervalL2).Append("\n");
            sb.Append("  energyReactiveExportIntervalL3: ").Append(energyReactiveExportIntervalL3).Append("\n");
            sb.Append("  voltage: ").Append(voltage).Append("\n");
            sb.Append("  voltageL1N: ").Append(voltageL1N).Append("\n");
            sb.Append("  voltageL2N: ").Append(voltageL2N).Append("\n");
            sb.Append("  voltageL3N: ").Append(voltageL3N).Append("\n");
            sb.Append("  voltageL1L2: ").Append(voltageL1L2).Append("\n");
            sb.Append("  voltageL2L3: ").Append(voltageL2L3).Append("\n");
            sb.Append("  voltageL3L1: ").Append(voltageL3L1).Append("\n");
            sb.Append("  frequency: ").Append(frequency).Append("\n");
            sb.Append("  powerFactor: ").Append(powerFactor).Append("\n");
            sb.Append("  powerFactorL1: ").Append(powerFactorL1).Append("\n");
            sb.Append("  powerFactorL2: ").Append(powerFactorL2).Append("\n");
            sb.Append("  powerFactorL3: ").Append(powerFactorL3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Measurement)obj);
        }

        /// <summary>
        /// Returns true if Measurement instances are equal
        /// </summary>
        /// <param name="other">Instance of Measurement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Measurement other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    timestamp == other.timestamp ||
                    timestamp != null &&
                    timestamp.Equals(other.timestamp)
                ) &&
                (
                    clockAligned == other.clockAligned ||
                    clockAligned != null &&
                    clockAligned.Equals(other.clockAligned)
                ) &&
                (
                    currentOffered == other.currentOffered ||
                    currentOffered != null &&
                    currentOffered.Equals(other.currentOffered)
                ) &&
                (
                    powerOffered == other.powerOffered ||
                    powerOffered != null &&
                    powerOffered.Equals(other.powerOffered)
                ) &&
                (
                    currentImport == other.currentImport ||
                    currentImport != null &&
                    currentImport.Equals(other.currentImport)
                ) &&
                (
                    currentImportN == other.currentImportN ||
                    currentImportN != null &&
                    currentImportN.Equals(other.currentImportN)
                ) &&
                (
                    currentImportL1 == other.currentImportL1 ||
                    currentImportL1 != null &&
                    currentImportL1.Equals(other.currentImportL1)
                ) &&
                (
                    currentImportL2 == other.currentImportL2 ||
                    currentImportL2 != null &&
                    currentImportL2.Equals(other.currentImportL2)
                ) &&
                (
                    currentImportL3 == other.currentImportL3 ||
                    currentImportL3 != null &&
                    currentImportL3.Equals(other.currentImportL3)
                ) &&
                (
                    powerActiveImport == other.powerActiveImport ||
                    powerActiveImport != null &&
                    powerActiveImport.Equals(other.powerActiveImport)
                ) &&
                (
                    powerActiveImportL1 == other.powerActiveImportL1 ||
                    powerActiveImportL1 != null &&
                    powerActiveImportL1.Equals(other.powerActiveImportL1)
                ) &&
                (
                    powerActiveImportL2 == other.powerActiveImportL2 ||
                    powerActiveImportL2 != null &&
                    powerActiveImportL2.Equals(other.powerActiveImportL2)
                ) &&
                (
                    powerActiveImportL3 == other.powerActiveImportL3 ||
                    powerActiveImportL3 != null &&
                    powerActiveImportL3.Equals(other.powerActiveImportL3)
                ) &&
                (
                    powerReactiveImport == other.powerReactiveImport ||
                    powerReactiveImport != null &&
                    powerReactiveImport.Equals(other.powerReactiveImport)
                ) &&
                (
                    powerReactiveImportL1 == other.powerReactiveImportL1 ||
                    powerReactiveImportL1 != null &&
                    powerReactiveImportL1.Equals(other.powerReactiveImportL1)
                ) &&
                (
                    powerReactiveImportL2 == other.powerReactiveImportL2 ||
                    powerReactiveImportL2 != null &&
                    powerReactiveImportL2.Equals(other.powerReactiveImportL2)
                ) &&
                (
                    powerReactiveImportL3 == other.powerReactiveImportL3 ||
                    powerReactiveImportL3 != null &&
                    powerReactiveImportL3.Equals(other.powerReactiveImportL3)
                ) &&
                (
                    energyActiveImportRegister == other.energyActiveImportRegister ||
                    energyActiveImportRegister != null &&
                    energyActiveImportRegister.Equals(other.energyActiveImportRegister)
                ) &&
                (
                    energyActiveImportRegisterL1 == other.energyActiveImportRegisterL1 ||
                    energyActiveImportRegisterL1 != null &&
                    energyActiveImportRegisterL1.Equals(other.energyActiveImportRegisterL1)
                ) &&
                (
                    energyActiveImportRegisterL2 == other.energyActiveImportRegisterL2 ||
                    energyActiveImportRegisterL2 != null &&
                    energyActiveImportRegisterL2.Equals(other.energyActiveImportRegisterL2)
                ) &&
                (
                    energyActiveImportRegisterL3 == other.energyActiveImportRegisterL3 ||
                    energyActiveImportRegisterL3 != null &&
                    energyActiveImportRegisterL3.Equals(other.energyActiveImportRegisterL3)
                ) &&
                (
                    energyActiveImportInterval == other.energyActiveImportInterval ||
                    energyActiveImportInterval != null &&
                    energyActiveImportInterval.Equals(other.energyActiveImportInterval)
                ) &&
                (
                    energyActiveImportIntervalL1 == other.energyActiveImportIntervalL1 ||
                    energyActiveImportIntervalL1 != null &&
                    energyActiveImportIntervalL1.Equals(other.energyActiveImportIntervalL1)
                ) &&
                (
                    energyActiveImportIntervalL2 == other.energyActiveImportIntervalL2 ||
                    energyActiveImportIntervalL2 != null &&
                    energyActiveImportIntervalL2.Equals(other.energyActiveImportIntervalL2)
                ) &&
                (
                    energyActiveImportIntervalL3 == other.energyActiveImportIntervalL3 ||
                    energyActiveImportIntervalL3 != null &&
                    energyActiveImportIntervalL3.Equals(other.energyActiveImportIntervalL3)
                ) &&
                (
                    energyReactiveImportRegister == other.energyReactiveImportRegister ||
                    energyReactiveImportRegister != null &&
                    energyReactiveImportRegister.Equals(other.energyReactiveImportRegister)
                ) &&
                (
                    energyReactiveImportRegisterL1 == other.energyReactiveImportRegisterL1 ||
                    energyReactiveImportRegisterL1 != null &&
                    energyReactiveImportRegisterL1.Equals(other.energyReactiveImportRegisterL1)
                ) &&
                (
                    energyReactiveImportRegisterL2 == other.energyReactiveImportRegisterL2 ||
                    energyReactiveImportRegisterL2 != null &&
                    energyReactiveImportRegisterL2.Equals(other.energyReactiveImportRegisterL2)
                ) &&
                (
                    energyReactiveImportRegisterL3 == other.energyReactiveImportRegisterL3 ||
                    energyReactiveImportRegisterL3 != null &&
                    energyReactiveImportRegisterL3.Equals(other.energyReactiveImportRegisterL3)
                ) &&
                (
                    energyReactiveImportInterval == other.energyReactiveImportInterval ||
                    energyReactiveImportInterval != null &&
                    energyReactiveImportInterval.Equals(other.energyReactiveImportInterval)
                ) &&
                (
                    energyReactiveImportIntervalL1 == other.energyReactiveImportIntervalL1 ||
                    energyReactiveImportIntervalL1 != null &&
                    energyReactiveImportIntervalL1.Equals(other.energyReactiveImportIntervalL1)
                ) &&
                (
                    energyReactiveImportIntervalL2 == other.energyReactiveImportIntervalL2 ||
                    energyReactiveImportIntervalL2 != null &&
                    energyReactiveImportIntervalL2.Equals(other.energyReactiveImportIntervalL2)
                ) &&
                (
                    energyReactiveImportIntervalL3 == other.energyReactiveImportIntervalL3 ||
                    energyReactiveImportIntervalL3 != null &&
                    energyReactiveImportIntervalL3.Equals(other.energyReactiveImportIntervalL3)
                ) &&
                (
                    currentExport == other.currentExport ||
                    currentExport != null &&
                    currentExport.Equals(other.currentExport)
                ) &&
                (
                    currentExportN == other.currentExportN ||
                    currentExportN != null &&
                    currentExportN.Equals(other.currentExportN)
                ) &&
                (
                    currentExportL1 == other.currentExportL1 ||
                    currentExportL1 != null &&
                    currentExportL1.Equals(other.currentExportL1)
                ) &&
                (
                    currentExportL2 == other.currentExportL2 ||
                    currentExportL2 != null &&
                    currentExportL2.Equals(other.currentExportL2)
                ) &&
                (
                    currentExportL3 == other.currentExportL3 ||
                    currentExportL3 != null &&
                    currentExportL3.Equals(other.currentExportL3)
                ) &&
                (
                    powerActiveExport == other.powerActiveExport ||
                    powerActiveExport != null &&
                    powerActiveExport.Equals(other.powerActiveExport)
                ) &&
                (
                    powerActiveExportL1 == other.powerActiveExportL1 ||
                    powerActiveExportL1 != null &&
                    powerActiveExportL1.Equals(other.powerActiveExportL1)
                ) &&
                (
                    powerActiveExportL2 == other.powerActiveExportL2 ||
                    powerActiveExportL2 != null &&
                    powerActiveExportL2.Equals(other.powerActiveExportL2)
                ) &&
                (
                    powerActiveExportL3 == other.powerActiveExportL3 ||
                    powerActiveExportL3 != null &&
                    powerActiveExportL3.Equals(other.powerActiveExportL3)
                ) &&
                (
                    powerReactiveExport == other.powerReactiveExport ||
                    powerReactiveExport != null &&
                    powerReactiveExport.Equals(other.powerReactiveExport)
                ) &&
                (
                    powerReactiveExportL1 == other.powerReactiveExportL1 ||
                    powerReactiveExportL1 != null &&
                    powerReactiveExportL1.Equals(other.powerReactiveExportL1)
                ) &&
                (
                    powerReactiveExportL2 == other.powerReactiveExportL2 ||
                    powerReactiveExportL2 != null &&
                    powerReactiveExportL2.Equals(other.powerReactiveExportL2)
                ) &&
                (
                    powerReactiveExportL3 == other.powerReactiveExportL3 ||
                    powerReactiveExportL3 != null &&
                    powerReactiveExportL3.Equals(other.powerReactiveExportL3)
                ) &&
                (
                    energyActiveExportRegister == other.energyActiveExportRegister ||
                    energyActiveExportRegister != null &&
                    energyActiveExportRegister.Equals(other.energyActiveExportRegister)
                ) &&
                (
                    energyActiveExportRegisterL1 == other.energyActiveExportRegisterL1 ||
                    energyActiveExportRegisterL1 != null &&
                    energyActiveExportRegisterL1.Equals(other.energyActiveExportRegisterL1)
                ) &&
                (
                    energyActiveExportRegisterL2 == other.energyActiveExportRegisterL2 ||
                    energyActiveExportRegisterL2 != null &&
                    energyActiveExportRegisterL2.Equals(other.energyActiveExportRegisterL2)
                ) &&
                (
                    energyActiveExportRegisterL3 == other.energyActiveExportRegisterL3 ||
                    energyActiveExportRegisterL3 != null &&
                    energyActiveExportRegisterL3.Equals(other.energyActiveExportRegisterL3)
                ) &&
                (
                    energyActiveExportInterval == other.energyActiveExportInterval ||
                    energyActiveExportInterval != null &&
                    energyActiveExportInterval.Equals(other.energyActiveExportInterval)
                ) &&
                (
                    energyActiveExportIntervalL1 == other.energyActiveExportIntervalL1 ||
                    energyActiveExportIntervalL1 != null &&
                    energyActiveExportIntervalL1.Equals(other.energyActiveExportIntervalL1)
                ) &&
                (
                    energyActiveExportIntervalL2 == other.energyActiveExportIntervalL2 ||
                    energyActiveExportIntervalL2 != null &&
                    energyActiveExportIntervalL2.Equals(other.energyActiveExportIntervalL2)
                ) &&
                (
                    energyActiveExportIntervalL3 == other.energyActiveExportIntervalL3 ||
                    energyActiveExportIntervalL3 != null &&
                    energyActiveExportIntervalL3.Equals(other.energyActiveExportIntervalL3)
                ) &&
                (
                    energyReactiveExportRegister == other.energyReactiveExportRegister ||
                    energyReactiveExportRegister != null &&
                    energyReactiveExportRegister.Equals(other.energyReactiveExportRegister)
                ) &&
                (
                    energyReactiveExportRegisterL1 == other.energyReactiveExportRegisterL1 ||
                    energyReactiveExportRegisterL1 != null &&
                    energyReactiveExportRegisterL1.Equals(other.energyReactiveExportRegisterL1)
                ) &&
                (
                    energyReactiveExportRegisterL2 == other.energyReactiveExportRegisterL2 ||
                    energyReactiveExportRegisterL2 != null &&
                    energyReactiveExportRegisterL2.Equals(other.energyReactiveExportRegisterL2)
                ) &&
                (
                    energyReactiveExportRegisterL3 == other.energyReactiveExportRegisterL3 ||
                    energyReactiveExportRegisterL3 != null &&
                    energyReactiveExportRegisterL3.Equals(other.energyReactiveExportRegisterL3)
                ) &&
                (
                    energyReactiveExportInterval == other.energyReactiveExportInterval ||
                    energyReactiveExportInterval != null &&
                    energyReactiveExportInterval.Equals(other.energyReactiveExportInterval)
                ) &&
                (
                    energyReactiveExportIntervalL1 == other.energyReactiveExportIntervalL1 ||
                    energyReactiveExportIntervalL1 != null &&
                    energyReactiveExportIntervalL1.Equals(other.energyReactiveExportIntervalL1)
                ) &&
                (
                    energyReactiveExportIntervalL2 == other.energyReactiveExportIntervalL2 ||
                    energyReactiveExportIntervalL2 != null &&
                    energyReactiveExportIntervalL2.Equals(other.energyReactiveExportIntervalL2)
                ) &&
                (
                    energyReactiveExportIntervalL3 == other.energyReactiveExportIntervalL3 ||
                    energyReactiveExportIntervalL3 != null &&
                    energyReactiveExportIntervalL3.Equals(other.energyReactiveExportIntervalL3)
                ) &&
                (
                    voltage == other.voltage ||
                    voltage != null &&
                    voltage.Equals(other.voltage)
                ) &&
                (
                    voltageL1N == other.voltageL1N ||
                    voltageL1N != null &&
                    voltageL1N.Equals(other.voltageL1N)
                ) &&
                (
                    voltageL2N == other.voltageL2N ||
                    voltageL2N != null &&
                    voltageL2N.Equals(other.voltageL2N)
                ) &&
                (
                    voltageL3N == other.voltageL3N ||
                    voltageL3N != null &&
                    voltageL3N.Equals(other.voltageL3N)
                ) &&
                (
                    voltageL1L2 == other.voltageL1L2 ||
                    voltageL1L2 != null &&
                    voltageL1L2.Equals(other.voltageL1L2)
                ) &&
                (
                    voltageL2L3 == other.voltageL2L3 ||
                    voltageL2L3 != null &&
                    voltageL2L3.Equals(other.voltageL2L3)
                ) &&
                (
                    voltageL3L1 == other.voltageL3L1 ||
                    voltageL3L1 != null &&
                    voltageL3L1.Equals(other.voltageL3L1)
                ) &&
                (
                    frequency == other.frequency ||
                    frequency != null &&
                    frequency.Equals(other.frequency)
                ) &&
                (
                    powerFactor == other.powerFactor ||
                    powerFactor != null &&
                    powerFactor.Equals(other.powerFactor)
                ) &&
                (
                    powerFactorL1 == other.powerFactorL1 ||
                    powerFactorL1 != null &&
                    powerFactorL1.Equals(other.powerFactorL1)
                ) &&
                (
                    powerFactorL2 == other.powerFactorL2 ||
                    powerFactorL2 != null &&
                    powerFactorL2.Equals(other.powerFactorL2)
                ) &&
                (
                    powerFactorL3 == other.powerFactorL3 ||
                    powerFactorL3 != null &&
                    powerFactorL3.Equals(other.powerFactorL3)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (timestamp != null)
                    hashCode = hashCode * 59 + timestamp.GetHashCode();
                if (clockAligned != null)
                    hashCode = hashCode * 59 + clockAligned.GetHashCode();
                if (currentOffered != null)
                    hashCode = hashCode * 59 + currentOffered.GetHashCode();
                if (powerOffered != null)
                    hashCode = hashCode * 59 + powerOffered.GetHashCode();
                if (currentImport != null)
                    hashCode = hashCode * 59 + currentImport.GetHashCode();
                if (currentImportN != null)
                    hashCode = hashCode * 59 + currentImportN.GetHashCode();
                if (currentImportL1 != null)
                    hashCode = hashCode * 59 + currentImportL1.GetHashCode();
                if (currentImportL2 != null)
                    hashCode = hashCode * 59 + currentImportL2.GetHashCode();
                if (currentImportL3 != null)
                    hashCode = hashCode * 59 + currentImportL3.GetHashCode();
                if (powerActiveImport != null)
                    hashCode = hashCode * 59 + powerActiveImport.GetHashCode();
                if (powerActiveImportL1 != null)
                    hashCode = hashCode * 59 + powerActiveImportL1.GetHashCode();
                if (powerActiveImportL2 != null)
                    hashCode = hashCode * 59 + powerActiveImportL2.GetHashCode();
                if (powerActiveImportL3 != null)
                    hashCode = hashCode * 59 + powerActiveImportL3.GetHashCode();
                if (powerReactiveImport != null)
                    hashCode = hashCode * 59 + powerReactiveImport.GetHashCode();
                if (powerReactiveImportL1 != null)
                    hashCode = hashCode * 59 + powerReactiveImportL1.GetHashCode();
                if (powerReactiveImportL2 != null)
                    hashCode = hashCode * 59 + powerReactiveImportL2.GetHashCode();
                if (powerReactiveImportL3 != null)
                    hashCode = hashCode * 59 + powerReactiveImportL3.GetHashCode();
                if (energyActiveImportRegister != null)
                    hashCode = hashCode * 59 + energyActiveImportRegister.GetHashCode();
                if (energyActiveImportRegisterL1 != null)
                    hashCode = hashCode * 59 + energyActiveImportRegisterL1.GetHashCode();
                if (energyActiveImportRegisterL2 != null)
                    hashCode = hashCode * 59 + energyActiveImportRegisterL2.GetHashCode();
                if (energyActiveImportRegisterL3 != null)
                    hashCode = hashCode * 59 + energyActiveImportRegisterL3.GetHashCode();
                if (energyActiveImportInterval != null)
                    hashCode = hashCode * 59 + energyActiveImportInterval.GetHashCode();
                if (energyActiveImportIntervalL1 != null)
                    hashCode = hashCode * 59 + energyActiveImportIntervalL1.GetHashCode();
                if (energyActiveImportIntervalL2 != null)
                    hashCode = hashCode * 59 + energyActiveImportIntervalL2.GetHashCode();
                if (energyActiveImportIntervalL3 != null)
                    hashCode = hashCode * 59 + energyActiveImportIntervalL3.GetHashCode();
                if (energyReactiveImportRegister != null)
                    hashCode = hashCode * 59 + energyReactiveImportRegister.GetHashCode();
                if (energyReactiveImportRegisterL1 != null)
                    hashCode = hashCode * 59 + energyReactiveImportRegisterL1.GetHashCode();
                if (energyReactiveImportRegisterL2 != null)
                    hashCode = hashCode * 59 + energyReactiveImportRegisterL2.GetHashCode();
                if (energyReactiveImportRegisterL3 != null)
                    hashCode = hashCode * 59 + energyReactiveImportRegisterL3.GetHashCode();
                if (energyReactiveImportInterval != null)
                    hashCode = hashCode * 59 + energyReactiveImportInterval.GetHashCode();
                if (energyReactiveImportIntervalL1 != null)
                    hashCode = hashCode * 59 + energyReactiveImportIntervalL1.GetHashCode();
                if (energyReactiveImportIntervalL2 != null)
                    hashCode = hashCode * 59 + energyReactiveImportIntervalL2.GetHashCode();
                if (energyReactiveImportIntervalL3 != null)
                    hashCode = hashCode * 59 + energyReactiveImportIntervalL3.GetHashCode();
                if (currentExport != null)
                    hashCode = hashCode * 59 + currentExport.GetHashCode();
                if (currentExportN != null)
                    hashCode = hashCode * 59 + currentExportN.GetHashCode();
                if (currentExportL1 != null)
                    hashCode = hashCode * 59 + currentExportL1.GetHashCode();
                if (currentExportL2 != null)
                    hashCode = hashCode * 59 + currentExportL2.GetHashCode();
                if (currentExportL3 != null)
                    hashCode = hashCode * 59 + currentExportL3.GetHashCode();
                if (powerActiveExport != null)
                    hashCode = hashCode * 59 + powerActiveExport.GetHashCode();
                if (powerActiveExportL1 != null)
                    hashCode = hashCode * 59 + powerActiveExportL1.GetHashCode();
                if (powerActiveExportL2 != null)
                    hashCode = hashCode * 59 + powerActiveExportL2.GetHashCode();
                if (powerActiveExportL3 != null)
                    hashCode = hashCode * 59 + powerActiveExportL3.GetHashCode();
                if (powerReactiveExport != null)
                    hashCode = hashCode * 59 + powerReactiveExport.GetHashCode();
                if (powerReactiveExportL1 != null)
                    hashCode = hashCode * 59 + powerReactiveExportL1.GetHashCode();
                if (powerReactiveExportL2 != null)
                    hashCode = hashCode * 59 + powerReactiveExportL2.GetHashCode();
                if (powerReactiveExportL3 != null)
                    hashCode = hashCode * 59 + powerReactiveExportL3.GetHashCode();
                if (energyActiveExportRegister != null)
                    hashCode = hashCode * 59 + energyActiveExportRegister.GetHashCode();
                if (energyActiveExportRegisterL1 != null)
                    hashCode = hashCode * 59 + energyActiveExportRegisterL1.GetHashCode();
                if (energyActiveExportRegisterL2 != null)
                    hashCode = hashCode * 59 + energyActiveExportRegisterL2.GetHashCode();
                if (energyActiveExportRegisterL3 != null)
                    hashCode = hashCode * 59 + energyActiveExportRegisterL3.GetHashCode();
                if (energyActiveExportInterval != null)
                    hashCode = hashCode * 59 + energyActiveExportInterval.GetHashCode();
                if (energyActiveExportIntervalL1 != null)
                    hashCode = hashCode * 59 + energyActiveExportIntervalL1.GetHashCode();
                if (energyActiveExportIntervalL2 != null)
                    hashCode = hashCode * 59 + energyActiveExportIntervalL2.GetHashCode();
                if (energyActiveExportIntervalL3 != null)
                    hashCode = hashCode * 59 + energyActiveExportIntervalL3.GetHashCode();
                if (energyReactiveExportRegister != null)
                    hashCode = hashCode * 59 + energyReactiveExportRegister.GetHashCode();
                if (energyReactiveExportRegisterL1 != null)
                    hashCode = hashCode * 59 + energyReactiveExportRegisterL1.GetHashCode();
                if (energyReactiveExportRegisterL2 != null)
                    hashCode = hashCode * 59 + energyReactiveExportRegisterL2.GetHashCode();
                if (energyReactiveExportRegisterL3 != null)
                    hashCode = hashCode * 59 + energyReactiveExportRegisterL3.GetHashCode();
                if (energyReactiveExportInterval != null)
                    hashCode = hashCode * 59 + energyReactiveExportInterval.GetHashCode();
                if (energyReactiveExportIntervalL1 != null)
                    hashCode = hashCode * 59 + energyReactiveExportIntervalL1.GetHashCode();
                if (energyReactiveExportIntervalL2 != null)
                    hashCode = hashCode * 59 + energyReactiveExportIntervalL2.GetHashCode();
                if (energyReactiveExportIntervalL3 != null)
                    hashCode = hashCode * 59 + energyReactiveExportIntervalL3.GetHashCode();
                if (voltage != null)
                    hashCode = hashCode * 59 + voltage.GetHashCode();
                if (voltageL1N != null)
                    hashCode = hashCode * 59 + voltageL1N.GetHashCode();
                if (voltageL2N != null)
                    hashCode = hashCode * 59 + voltageL2N.GetHashCode();
                if (voltageL3N != null)
                    hashCode = hashCode * 59 + voltageL3N.GetHashCode();
                if (voltageL1L2 != null)
                    hashCode = hashCode * 59 + voltageL1L2.GetHashCode();
                if (voltageL2L3 != null)
                    hashCode = hashCode * 59 + voltageL2L3.GetHashCode();
                if (voltageL3L1 != null)
                    hashCode = hashCode * 59 + voltageL3L1.GetHashCode();
                if (frequency != null)
                    hashCode = hashCode * 59 + frequency.GetHashCode();
                if (powerFactor != null)
                    hashCode = hashCode * 59 + powerFactor.GetHashCode();
                if (powerFactorL1 != null)
                    hashCode = hashCode * 59 + powerFactorL1.GetHashCode();
                if (powerFactorL2 != null)
                    hashCode = hashCode * 59 + powerFactorL2.GetHashCode();
                if (powerFactorL3 != null)
                    hashCode = hashCode * 59 + powerFactorL3.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Measurement left, Measurement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Measurement left, Measurement right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
