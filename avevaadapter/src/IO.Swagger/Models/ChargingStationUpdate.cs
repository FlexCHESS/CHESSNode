/*
 * Charging Station Monitoring API
 *
 * Single endpoint to receive bulk updates from a Charging Station Management System (CSMS). The server is expected to update its internal database based on the differential changes in the data and respond with a list of load curves (one per charging station). A call to this endpoint is made as soon as new data is available or if not data is available on a set interval. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ChargingStationUpdate : IEquatable<ChargingStationUpdate>
    { 
        /// <summary>
        /// Unique identifier of the Charging Station (across the entire system). 
        /// </summary>
        /// <value>Unique identifier of the Charging Station (across the entire system). </value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Operational status of the Charging Station.   - **Unknown**: The CSMS does not know the status of this charger.   - **Available**: The charger is operating normally and can provide new charging sessions.   - **Maintenance**: The charger operates normally but cannot be used for new charging sessions (e.g., maintenance mode).   - **Faulted**: There is a problem with the charger; it is unable to operate. 
        /// </summary>
        /// <value>Operational status of the Charging Station.   - **Unknown**: The CSMS does not know the status of this charger.   - **Available**: The charger is operating normally and can provide new charging sessions.   - **Maintenance**: The charger operates normally but cannot be used for new charging sessions (e.g., maintenance mode).   - **Faulted**: There is a problem with the charger; it is unable to operate. </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum UnknownEnum for Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            UnknownEnum = 0,
            /// <summary>
            /// Enum AvailableEnum for Available
            /// </summary>
            [EnumMember(Value = "Available")]
            AvailableEnum = 1,
            /// <summary>
            /// Enum MaintenanceEnum for Maintenance
            /// </summary>
            [EnumMember(Value = "Maintenance")]
            MaintenanceEnum = 2,
            /// <summary>
            /// Enum FaultedEnum for Faulted
            /// </summary>
            [EnumMember(Value = "Faulted")]
            FaultedEnum = 3        }

        /// <summary>
        /// Operational status of the Charging Station.   - **Unknown**: The CSMS does not know the status of this charger.   - **Available**: The charger is operating normally and can provide new charging sessions.   - **Maintenance**: The charger operates normally but cannot be used for new charging sessions (e.g., maintenance mode).   - **Faulted**: There is a problem with the charger; it is unable to operate. 
        /// </summary>
        /// <value>Operational status of the Charging Station.   - **Unknown**: The CSMS does not know the status of this charger.   - **Available**: The charger is operating normally and can provide new charging sessions.   - **Maintenance**: The charger operates normally but cannot be used for new charging sessions (e.g., maintenance mode).   - **Faulted**: There is a problem with the charger; it is unable to operate. </value>
        [Required]

        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// List of EVSE objects for this Charging Station
        /// </summary>
        /// <value>List of EVSE objects for this Charging Station</value>
        [Required]

        [DataMember(Name="evse")]
        public List<EVSEUpdate> Evse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargingStationUpdate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Evse: ").Append(Evse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ChargingStationUpdate)obj);
        }

        /// <summary>
        /// Returns true if ChargingStationUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of ChargingStationUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargingStationUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Evse == other.Evse ||
                    Evse != null &&
                    Evse.SequenceEqual(other.Evse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Evse != null)
                    hashCode = hashCode * 59 + Evse.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ChargingStationUpdate left, ChargingStationUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ChargingStationUpdate left, ChargingStationUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
