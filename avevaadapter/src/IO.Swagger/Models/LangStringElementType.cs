/*
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 *
 * All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"
 *
 * OpenAPI spec version: V3.0.1
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Azure.DigitalTwins.Core;
using System.Text.Json.Serialization;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LangStringElementType
    {
        


        public class Metadata
        {
            public String lastUpdateTime { get; set; } = DateTime.Now.ToString();
        }
        //
        // Summary:
        //     Information about the model a digital twin conforms to. This field is present
        //     on every digital twin.
        [DataMember(Name = "$metadata")]
        [JsonPropertyName("$metadata")]
        public Metadata metadata { get; set; } = new Metadata();



        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LangStringElementType)obj);
        }

        /// <summary>
        /// Returns true if LangStringElementType instances are equal
        /// </summary>
        /// <param name="other">Instance of LangStringElementType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LangStringElementType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    metadata == other.metadata ||
                    metadata != null &&
                    metadata.lastUpdateTime.Equals(other.metadata.lastUpdateTime)
                );
        }


        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (metadata != null)
                    hashCode = hashCode * 59 + metadata.lastUpdateTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(LangStringElementType left, LangStringElementType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LangStringElementType left, LangStringElementType right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
