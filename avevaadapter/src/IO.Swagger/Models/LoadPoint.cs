/*
 * Charging Station Monitoring API
 *
 * Single endpoint to receive bulk updates from a Charging Station Management System (CSMS). The server is expected to update its internal database based on the differential changes in the data and respond with a list of load curves (one per charging station). A call to this endpoint is made as soon as new data is available or if not data is available on a set interval. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// A single time-current pair. The timestamp must be in the future. Actuation is done at timestamp with value. If no further limits are imposed The last limit acts as the de facto limit. 
    /// </summary>
    [DataContract]
    public partial class LoadPoint : IEquatable<LoadPoint>
    { 
        /// <summary>
        /// ISO 8601 timestamp (UTC, with timezone), must be in the future
        /// </summary>
        /// <value>ISO 8601 timestamp (UTC, with timezone), must be in the future</value>
        [Required]

        [DataMember(Name="timestamp")]
        public String? Timestamp { get; set; }

        /// <summary>
        /// Current in amperes (A)
        /// </summary>
        /// <value>Current in amperes (A)</value>
        [Required]

        [DataMember(Name="current")]
        public float? Current { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoadPoint {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LoadPoint)obj);
        }

        /// <summary>
        /// Returns true if LoadPoint instances are equal
        /// </summary>
        /// <param name="other">Instance of LoadPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoadPoint other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    Current == other.Current ||
                    Current != null &&
                    Current.Equals(other.Current)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (Current != null)
                    hashCode = hashCode * 59 + Current.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LoadPoint left, LoadPoint right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LoadPoint left, LoadPoint right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
