/*
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 *
 * All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"
 *
 * OpenAPI spec version: V3.0.1
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using System.Text.Json;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Azure.DigitalTwins.Core;
using Azure;
using System.Net;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AssetAdministrationShellAPIApiController : Controller
    {

        //JWT Access token class 
        public class Token
        {
            public String sub { get; set; }
            public String aut { get; set; }
            public String aud { get; set; }
            public String nbf { get; set; }
            public String azp { get; set; }
            public String scope { get; set; }
            public String iss { get; set; }
            public String exp { get; set; }
            public String iat { get; set; }
            public String jti { get; set; }
            public String location { get; set; }
            public String uri { get; set; }

            public Token() { }
        }
        //Function to decode JWT token
        private Token decodeToken(String token)
        {
            String str = token.Substring(token.IndexOf(".") + 1, token.LastIndexOf(".") - token.IndexOf(".") - 1);
            if (str.Length % 4 != 0)
                str += new String('=', 4 - str.Length % 4);

            byte[] data = Convert.FromBase64String(str);
            string decodedString = System.Text.Encoding.UTF8.GetString(data);
            Token jwt = JsonConvert.DeserializeObject<Token>(decodedString);


            return jwt;
        }

        // Function to get the subject attributes
        private String getSubjectAttribute(BasicDigitalTwin twin)
        {
            String query = "SELECT DT.$dtId FROM DIGITALTWINS twin JOIN DT RELATED twin.targetSubjectAttributes WHERE twin.$dtId = '" + twin.Id + "AccessControlPermissions'";

            // get the permissions from subject attriubtes for the submodel
            Pageable<BasicDigitalTwin> attributeResponse = Program.dtClient.Query<BasicDigitalTwin>(query);
            String subjectAttribute = "";
            if (attributeResponse != null)
            {

                foreach (BasicDigitalTwin attribute in attributeResponse)
                {
                    subjectAttribute += " " + attribute.Id;
                }


            }
            else subjectAttribute = "default";
            return subjectAttribute;
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="200">List of found submodel elements</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/submodels/{submodelIdentifier}/submodel-elements/$metadata")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelElementsMetadataAAS")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetSubmodelElementsMetadataResult), description: "List of found submodel elements")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAllSubmodelElementsMetadataAAS([FromRoute][Required]string submodelIdentifier, [FromQuery]int? limit, [FromQuery]string cursor, [FromQuery]string level)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetSubmodelElementsMetadataResult));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));

            List<IoT.Services.SubmodelElement> res = new List<IoT.Services.SubmodelElement>();

            try
            {
                Pageable<BasicDigitalTwin> twinResponse = Program.dtClient.Query<BasicDigitalTwin>("select $dtId from digitaltwins where $dtId = '" + submodelIdentifier + "'");
                foreach (BasicDigitalTwin twin in twinResponse)
                {



                    if (twin != null)
                    {


                        Response<IoT.Services.SubmodelElement> dataResponse = Program.dtClient.GetDigitalTwin<IoT.Services.SubmodelElement>(twin.Id);


                        if (dataResponse.Value.Metadata != null)
                        {

                            res.Add(dataResponse);
                            Console.WriteLine("Metadata " + dataResponse.Value.Metadata.ToString());
                        }
                        else
                            Console.WriteLine("Metadata null");




                        if (res.Count == limit) break;
                    }
                }


            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
                return this.NotFound(ex.Message);
            }

            return Json(res);

        }



        /// <summary>
        /// Returns all submodel elements including their hierarchy in the ValueOnly representation
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">List of found submodel elements in their ValueOnly representation</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/submodels/{submodelIdentifier}/submodel-elements/$value")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelElementsValueOnlyAAS")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetSubmodelElementsValueResult), description: "List of found submodel elements in their ValueOnly representation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAllSubmodelElementsValueOnlyAAS([FromRoute][Required]string submodelIdentifier, [FromQuery]int? limit, [FromQuery]string cursor, [FromQuery]string level, [FromQuery]string extent, [FromHeader]string Authorization)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetSubmodelElementsValueResult));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            String res = "[";


            String query = "SELECT $dtId FROM  DigitalTwins  where $metadata.$model = 'dtmi:digitaltwins:aas:Submodel;1' and $dtId = '" + submodelIdentifier + "'";

            // Must be authorized using header
            if (Authorization == null)
                return StatusCode(401, default(Result));



            // we need to decode and check
            Token token = decodeToken(Authorization);

            try
            {

                Pageable<BasicDigitalTwin> twinResponse = Program.dtClient.Query<BasicDigitalTwin>(query);

                if (twinResponse != null)
                {

                    foreach (BasicDigitalTwin twin in twinResponse)
                    {
                        String subjectAttribute = getSubjectAttribute(twin);

                        // check to authorize access
                        if (subjectAttribute.Equals("") || ((token.location == null || subjectAttribute.Contains(token.location)) &&
                            (token.uri == null || subjectAttribute.Contains(token.uri)) && subjectAttribute.Contains(token.scope + token.aud)))
                        {

                            Console.WriteLine("Authorized: " + subjectAttribute);
                            query = "SELECT DT.$dtId FROM DIGITALTWINS twin JOIN DT RELATED twin.submodelElement WHERE twin.$dtId = '" + twin.Id + "'";

                            Pageable<BasicDigitalTwin> smeResponse = Program.dtClient.Query<BasicDigitalTwin>(query);
                            foreach (BasicDigitalTwin smeTwin in smeResponse)
                            {
                                Response<IoT.Services.DataSpecificationIEC61360> dataResponse = Program.dtClient.GetDigitalTwin<IoT.Services.DataSpecificationIEC61360>(smeTwin.Id.Substring(4));


                                if (dataResponse.Value.Value != null)
                                {

                                    if (dataResponse.Value.DataType == IoT.Services.DataSpecificationIEC61360DataType.STRING )
                                        res += "{\"Id\":\"" + smeTwin.Id.ToString() + "\",\"DataType\":\"" + dataResponse.Value.DataType.ToString() +"\",\"LevelType\":\"" + dataResponse.Value.LevelType.ToString() +"\",\"ValueFormat\":\"" + dataResponse.Value.ValueFormat.ToString() +"\", \"Symbol\":\"" + dataResponse.Value.Symbol.ToString() +"\", \"Unit\":\"" + dataResponse.Value.Unit.ToString() +"\", \"Value\": \"" + dataResponse.Value.Value.ToString() + "\"},";
                                   else
                                        res += "{\"Id\":\"" + smeTwin.Id.ToString() + "\",\"DataType\":\"" + dataResponse.Value.DataType.ToString() +"\",\"LevelType\":\"" + dataResponse.Value.LevelType.ToString() +"\",\"ValueFormat\":\"" + dataResponse.Value.ValueFormat.ToString() +"\", \"Symbol\":\"" + dataResponse.Value.Symbol.ToString() +"\", \"Unit\":\"" + dataResponse.Value.Unit.ToString() +"\",\"Value\": " + dataResponse.Value.Value.ToString() + "},";


                                    Console.WriteLine("Value " + dataResponse.Value.Value.ToString());
                                }
                                else
                                {
                                    res += "{\"Id\":\"" + smeTwin.Id.ToString() + "\",\"DataType\":\"" + dataResponse.Value.DataType.ToString() +"\",\"LevelType\":\"" + dataResponse.Value.LevelType.ToString() +"\",\"ValueFormat\":\"" + dataResponse.Value.ValueFormat.ToString() +"\", \"Symbol\":\"" + dataResponse.Value.Symbol.ToString() +"\",\"Unit\":\"" + dataResponse.Value.Unit.ToString() +"\", \"Value\": null},";

                                    Console.WriteLine("Value null");
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
                return this.NotFound(ex);
            }

            return Json(JsonConvert.DeserializeObject(res.Trim(',') + "]"));

        }

        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <response code="200">Requested submodel references</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/submodel-refs")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelReferences")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetReferencesResult), description: "Requested submodel references")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAllSubmodelReferences([FromQuery]int? limit, [FromQuery]string cursor)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetReferencesResult));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GetReferencesResult>(exampleJson)
                        : default(GetReferencesResult);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell
        /// </summary>
        /// <response code="200">Requested Asset Administration Shell</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetAdministrationShell")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAdministrationShell), description: "Requested Asset Administration Shell")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAssetAdministrationShell()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssetAdministrationShell));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetAdministrationShell>(exampleJson)
                        : default(AssetAdministrationShell);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        

        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <response code="200">Requested Asset Information</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/asset-information")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetInformation")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetInformation), description: "Requested Asset Information")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAssetInformation()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssetInformation));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            string exampleJson = null;
            exampleJson = "{\n  \"assetKind\" : \"Instance\",\n  \"specificAssetIds\" : [ \"\", \"\" ],\n  \"defaultThumbnail\" : {\n    \"path\" : \"\",\n    \"contentType\" : \"\"\n  },\n  \"globalAssetId\" : \"globalAssetId\",\n  \"assetType\" : \"assetType\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetInformation>(exampleJson)
                        : default(AssetInformation);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        
        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested Submodel</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/submodels/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelAAS")]
        [SwaggerResponse(statusCode: 200, type: typeof(Submodel), description: "Requested Submodel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetSubmodelAAS([FromRoute][Required]string submodelIdentifier, [FromQuery]string level, [FromQuery]string extent, [FromHeader]string Authorization)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Submodel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            GetSubmodelElementsResult submodelRes = new GetSubmodelElementsResult();

            submodelRes.Result = new List<Models.SubmodelElement>();

            String query = "SELECT $dtId FROM  DigitalTwins  where $metadata.$model = 'dtmi:digitaltwins:aas:Submodel;1' and $dtId = '" + submodelIdentifier + "'";

            // Must be authorized using header
            if (Authorization == null)
                return StatusCode(401, default(Result));

            Models.Reference dataSpecificationIec61360;

            // we need to decode and check
            Token token = decodeToken(Authorization);

            try
            {

                Pageable<BasicDigitalTwin> twinResponse = Program.dtClient.Query<BasicDigitalTwin>(query);

                if (twinResponse != null)
                {
                
                    foreach (BasicDigitalTwin twin in twinResponse)
                    {
                        String subjectAttribute = getSubjectAttribute(twin);

                        // check to authorize access
                        if (subjectAttribute.Equals("") || (( token.location == null || subjectAttribute.Contains(token.location)) &&
                            ( token.uri == null || subjectAttribute.Contains(token.uri))  && subjectAttribute.Contains(token.scope + token.aud)))
                        {

                            Console.WriteLine("Authorized: " + subjectAttribute);
                            query = "SELECT DT.$dtId FROM DIGITALTWINS twin JOIN DT RELATED twin.submodelElement WHERE twin.$dtId = '" + twin.Id + "'";

                            Pageable<BasicDigitalTwin> smeResponse = Program.dtClient.Query<BasicDigitalTwin>(query);
                            foreach (BasicDigitalTwin smeTwin in smeResponse)
                            {

                                Response<IoT.Services.DataSpecificationIEC61360> dataResponse = Program.dtClient.GetDigitalTwin<IoT.Services.DataSpecificationIEC61360>(smeTwin.Id.Substring(4));
                                Models.ReferenceParent refparent = new Models.ReferenceParent(); 
                                refparent.Type = ReferenceTypes.ExternalReferenceEnum;
                                Key key = new Key();
                                if (dataResponse.Value.SourceOfDefinition.Contains("#"))
                                    key.Value = dataResponse.Value.SourceOfDefinition.Substring(0,dataResponse.Value.SourceOfDefinition.IndexOf("#"));
                                else
                                    key.Value = dataResponse.Value.SourceOfDefinition;
                                refparent.Keys = new List<Key>();
                                refparent.Keys.Add(key);
                                Models.Reference smref = new Models.Reference();
                                smref.ReferredSemanticId = refparent;
                                smref.Keys = new List<Key>();
                                key = new Key();
                                key.Value = dataResponse.Value.SourceOfDefinition;
                                smref.Keys.Add(key);
                                Models.SubmodelElement se = new Models.SubmodelElement();
                                se.SemanticId = smref;
                                se.DisplayName = new List<LangStringNameType>();
                                se.DisplayName.Add(new LangStringNameType());
                                se.DisplayName[0].Text = dataResponse.Value.Id;
                                se.DisplayName[0].Language = "en";

                                se.ModelType = ModelType.DataSpecificationIec61360Enum;
                                se.EmbeddedDataSpecifications = new List<EmbeddedDataSpecification>();
                                se.EmbeddedDataSpecifications.Add(new EmbeddedDataSpecification());
                                dataSpecificationIec61360 = new Models.Reference();
                                List<Models.Key> keys = new List<Models.Key>();
                                keys.Add(new Models.Key());
                                keys[0].Value =  "IEC61360";
                                dataSpecificationIec61360.Keys = keys;

                                se.EmbeddedDataSpecifications[0].DataSpecification = dataSpecificationIec61360;
                                se.EmbeddedDataSpecifications[0].DataSpecificationContent = dataResponse.Value;
                                submodelRes.Result.Add(se);
                                                                                            

                            }                            
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
                return this.NotFound(ex);
            }

            return Json(submodelRes);

        }



        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested submodel element</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelElementByPathAAS")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelElement), description: "Requested submodel element")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetSubmodelElementByPathAAS([FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, [FromQuery]string level, [FromQuery]string extent, [FromHeader]string Authorization)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SubmodelElement));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            
                      GetSubmodelElementsResult submodelRes = new GetSubmodelElementsResult();

            submodelRes.Result = new List<Models.SubmodelElement>();

            String query = "SELECT $dtId FROM  DigitalTwins  where $metadata.$model = 'dtmi:digitaltwins:aas:Submodel;1' and $dtId = '" + submodelIdentifier + "'";

            // Must be authorized using header
            if (Authorization == null)
                return StatusCode(401, default(Result));

            Models.Reference dataSpecificationIec61360;

            // we need to decode and check
            Token token = decodeToken(Authorization);

            try
            {

                Pageable<BasicDigitalTwin> twinResponse = Program.dtClient.Query<BasicDigitalTwin>(query);

                if (twinResponse != null)
                {
                
                    foreach (BasicDigitalTwin twin in twinResponse)
                    {
                        String subjectAttribute = getSubjectAttribute(twin);

                        // check to authorize access
                        if (subjectAttribute.Equals("") || (( token.location == null || subjectAttribute.Contains(token.location)) &&
                            ( token.uri == null || subjectAttribute.Contains(token.uri))  && subjectAttribute.Contains(token.scope + token.aud)))
                        {

                            Console.WriteLine("Authorized: " + subjectAttribute);
                            query = "SELECT DT.$dtId FROM DIGITALTWINS twin JOIN DT RELATED twin.submodelElement WHERE twin.$dtId = '" + twin.Id + "' and DT.$dtId='" + idShortPath +"'";

                            Pageable<BasicDigitalTwin> smeResponse = Program.dtClient.Query<BasicDigitalTwin>(query);
                            foreach (BasicDigitalTwin smeTwin in smeResponse)
                            {

                                Response<IoT.Services.DataSpecificationIEC61360> dataResponse = Program.dtClient.GetDigitalTwin<IoT.Services.DataSpecificationIEC61360>(smeTwin.Id.Substring(4));
                                Models.ReferenceParent refparent = new Models.ReferenceParent(); 
                                refparent.Type = ReferenceTypes.ExternalReferenceEnum;
                                Key key = new Key();
                                   if (dataResponse.Value.SourceOfDefinition.Contains("#"))
                                    key.Value = dataResponse.Value.SourceOfDefinition.Substring(0,dataResponse.Value.SourceOfDefinition.IndexOf("#"));
                                else
                                    key.Value = dataResponse.Value.SourceOfDefinition;
                                refparent.Keys = new List<Key>();
                                refparent.Keys.Add(key);
                                Models.Reference smref = new Models.Reference();
                                smref.ReferredSemanticId = refparent;
                                smref.Keys = new List<Key>();
                                key = new Key();
                                key.Value = dataResponse.Value.SourceOfDefinition;
                                smref.Keys.Add(key);
                                Models.SubmodelElement se = new Models.SubmodelElement();
                                se.SemanticId = smref;
                                se.DisplayName = new List<LangStringNameType>();
                                se.DisplayName.Add(new LangStringNameType());
                                se.DisplayName[0].Text = dataResponse.Value.Id;
                                se.DisplayName[0].Language = "en";

                                se.ModelType = ModelType.DataSpecificationIec61360Enum;
                                se.EmbeddedDataSpecifications = new List<EmbeddedDataSpecification>();
                                se.EmbeddedDataSpecifications.Add(new EmbeddedDataSpecification());
                                dataSpecificationIec61360 = new Models.Reference();
                                List<Models.Key> keys = new List<Models.Key>();
                                keys.Add(new Models.Key());
                                keys[0].Value =  "IEC61360";
                                dataSpecificationIec61360.Keys = keys;

                                se.EmbeddedDataSpecifications[0].DataSpecification = dataSpecificationIec61360;
                                se.EmbeddedDataSpecifications[0].DataSpecificationContent = dataResponse.Value;
                                submodelRes.Result.Add(se);
                                                                                            

                            }                            
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
                return this.NotFound(ex);
            }

            return Json(submodelRes);

        }


        /// <summary>
        /// Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="200">Requested submodel element</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelElementByPathMetadataAAS")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelElementMetadata), description: "Requested submodel element")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetSubmodelElementByPathMetadataAAS([FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, [FromQuery]string level)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SubmodelElementMetadata));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            List<IoT.Services.SubmodelElement> res = new List<IoT.Services.SubmodelElement>();

            try
            {
                Pageable<BasicDigitalTwin> twinResponse = Program.dtClient.Query<BasicDigitalTwin>("select $dtId from digitaltwins where $dtId = '" + submodelIdentifier + "'");
                foreach (BasicDigitalTwin twin in twinResponse)
                {



                    if (twin != null)
                    {


                        Response<IoT.Services.SubmodelElement> dataResponse = Program.dtClient.GetDigitalTwin<IoT.Services.SubmodelElement>(twin.Id);


                        if (dataResponse.Value.Metadata != null)
                        {

                            res.Add(dataResponse);
                            Console.WriteLine("Metadata " + dataResponse.Value.Metadata.ToString());
                        }
                        else
                            Console.WriteLine("Metadata null");




                    }
                }


            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
                return this.NotFound(ex.Message);
            }

            return Json(res);
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="200">Requested submodel element in its ValueOnly representation</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelElementByPathValueOnlyAAS")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelElementValue), description: "Requested submodel element in its ValueOnly representation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetSubmodelElementByPathValueOnlyAAS([FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, [FromQuery]string level, [FromHeader] string Authorization)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SubmodelElementValue));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            String res = "[";


            String query = "SELECT $dtId FROM  DigitalTwins  where $metadata.$model = 'dtmi:digitaltwins:aas:Submodel;1' and $dtId = '" + submodelIdentifier + "'";

            // Must be authorized using header
            if (Authorization == null)
                return StatusCode(401, default(Result));



            // we need to decode and check
            Token token = decodeToken(Authorization);

            try
            {

                Pageable<BasicDigitalTwin> twinResponse = Program.dtClient.Query<BasicDigitalTwin>(query);

                if (twinResponse != null)
                {
                    foreach (BasicDigitalTwin twin in twinResponse)
                    {
                        String subjectAttribute = getSubjectAttribute(twin);

                        // check to authorize access
                        if (subjectAttribute.Equals("") || ((token.location == null || subjectAttribute.Contains(token.location)) &&
                          (token.uri == null || subjectAttribute.Contains(token.uri)) && subjectAttribute.Contains(token.scope + token.aud)))
                        {

                            Console.WriteLine("Authorized: " + subjectAttribute);
                            query = "SELECT DT.$dtId FROM DIGITALTWINS twin JOIN DT RELATED twin.submodelElement WHERE twin.$dtId = '" + twin.Id + "' and DT.$dtId = '" + idShortPath + "'";

                            Pageable<BasicDigitalTwin> smeResponse = Program.dtClient.Query<BasicDigitalTwin>(query);
                            foreach (BasicDigitalTwin smeTwin in smeResponse)
                            {
                                Response<IoT.Services.DataSpecificationIEC61360> dataResponse = Program.dtClient.GetDigitalTwin<IoT.Services.DataSpecificationIEC61360>(smeTwin.Id.Substring(4));


                                if (dataResponse.Value.Value != null)
                                {
                                   if (dataResponse.Value.DataType == IoT.Services.DataSpecificationIEC61360DataType.STRING )
                                        res += "{\"Id\":\"" + smeTwin.Id.ToString() + "\",\"DataType\":\"" + dataResponse.Value.DataType.ToString() +"\",\"LevelType\":\"" + dataResponse.Value.LevelType.ToString() +"\",\"ValueFormat\":\"" + dataResponse.Value.ValueFormat.ToString() +"\", \"Symbol\":\"" + dataResponse.Value.Symbol.ToString() +"\",\"Unit\":\"" + dataResponse.Value.Unit.ToString() +"\", \"Value\": \"" + dataResponse.Value.Value.ToString() + "\"},";
                                   else                                
                                        res += "{\"Id\":\"" + smeTwin.Id.ToString() + "\",\"DataType\":\"" + dataResponse.Value.DataType.ToString() +"\",\"LevelType\":\"" + dataResponse.Value.LevelType.ToString() +"\",\"ValueFormat\":\"" + dataResponse.Value.ValueFormat.ToString() +"\", \"Symbol\":\"" + dataResponse.Value.Symbol.ToString() +"\",\"Unit\":\"" + dataResponse.Value.Unit.ToString() +"\", \"Value\": " + dataResponse.Value.Value.ToString() + "},";


                                    Console.WriteLine("Value " + dataResponse.Value.Value.ToString());
                                }
                                else
                                {
                                    res += "{\"Id\":\"" + smeTwin.Id.ToString() + "\",\"DataType\":\"" + dataResponse.Value.DataType.ToString() +"\",\"LevelType\":\"" + dataResponse.Value.LevelType.ToString() +"\",\"ValueFormat\":\"" + dataResponse.Value.ValueFormat.ToString() +"\", \"Symbol\":\"" + dataResponse.Value.Symbol.ToString() +"\", \"Unit\":\"" + dataResponse.Value.Unit.ToString() +"\",\"Value\": null},";

                                    Console.WriteLine("Value null");
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
                return this.NotFound(ex);
            }

            return Json(JsonConvert.DeserializeObject(res.Trim(',') + "]"));

        }

        /// <summary>
        /// Returns the Submodel&#x27;s metadata elements
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="200">Requested Submodel</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/submodels/{submodelIdentifier}/$metadata")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelMetadataAAS")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelMetadata), description: "Requested Submodel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetSubmodelMetadataAAS([FromRoute][Required]string submodelIdentifier, [FromQuery]string level)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SubmodelMetadata));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SubmodelMetadata>(exampleJson)
                        : default(SubmodelMetadata);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns the Submodel as a Reference
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <response code="200">Requested Submodel as a Reference</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/submodels/{submodelIdentifier}/$reference")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelMetadataReferenceAAS")]
        [SwaggerResponse(statusCode: 200, type: typeof(Reference), description: "Requested Submodel as a Reference")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetSubmodelMetadataReferenceAAS([FromRoute][Required]string submodelIdentifier, [FromQuery]string level)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Reference));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Reference>(exampleJson)
                        : default(Reference);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        
        /// <summary>
        /// Returns the Submodel&#x27;s ValueOnly representation
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested Submodel</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/aas/submodels/{submodelIdentifier}/$value")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelValueOnlyAAS")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelValue), description: "Requested Submodel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetSubmodelValueOnlyAAS([FromRoute][Required]string submodelIdentifier, [FromQuery]string level, [FromQuery]string extent)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SubmodelValue));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            string exampleJson = null;
            exampleJson = "{\n  \"submodelElements\" : [ \"\", \"\" ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SubmodelValue>(exampleJson)
                        : default(SubmodelValue);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Synchronously invokes an Operation at a specified path
        /// </summary>
        /// <param name="body">Operation request object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="200">Operation result object</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("/api/v3.0/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value")]
        [ValidateModelState]
        [SwaggerOperation("InvokeOperationSyncValueOnlyAAS")]
        [SwaggerResponse(statusCode: 200, type: typeof(OperationResultValueOnly), description: "Operation result object")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult InvokeOperationSyncValueOnlyAAS([FromBody]IoT.Services.DataSpecificationIEC61360 body, [FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, [FromHeader]string Authorization)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OperationResultValueOnly));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));

            String query = "SELECT $dtId FROM  DigitalTwins  where $metadata.$model = 'dtmi:digitaltwins:aas:Submodel;1' and $dtId='" + submodelIdentifier + "'";
            // Must be authorized using header
            if (Authorization == null)
                return StatusCode(401, default(Result));



            // we need to decode and check
            Token token = decodeToken(Authorization);

            try
            {

                Pageable<BasicDigitalTwin> twinResponse = Program.dtClient.Query<BasicDigitalTwin>(query);

                foreach (BasicDigitalTwin twin in twinResponse)
                {

                    if (twin != null)
                    {

                        query = "SELECT DT.$dtId FROM DIGITALTWINS twin JOIN DT RELATED twin.submodelElement WHERE twin.$dtId = '" + twin.Id + "' and DT.$dtId = '" + idShortPath + "'";




                        Pageable<BasicDigitalTwin> smeResponse = Program.dtClient.Query<BasicDigitalTwin>(query);

                        foreach (BasicDigitalTwin smeTwin in smeResponse)
                        {
                            Response response;
                            String subjectAttribute = getSubjectAttribute(twin);

                            // check to authorize access

                            if (subjectAttribute.Equals("") || ((token.location == null || subjectAttribute.Contains(token.location)) &&
                               (token.uri == null || subjectAttribute.Contains(token.uri)) && subjectAttribute.Contains(token.scope + token.aud)))
                                if (smeTwin != null)
                                {
                                    Console.WriteLine("Updating twin " + smeTwin.Id + " - " + Newtonsoft.Json.JsonConvert.SerializeObject(body));

                                    JsonPatchDocument update = new JsonPatchDocument();
                                    update.AppendReplace("/value", body.Value.ToString());

                                    try
                                    {
                                        response = Program.dtClient.UpdateDigitalTwin(smeTwin.Id.Substring(4), update);
                                    }
                                    catch (Exception ex)
                                    {

                                        update = new JsonPatchDocument();
                                        update.AppendAdd("/value", body.Value.ToString());
                                        response = Program.dtClient.UpdateDigitalTwin(smeTwin.Id.Substring(4), update);
                                    }
                                }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message.ToString());
                return this.NotFound(ex.Message);

            }

            return this.Ok();

        }

    }
}
