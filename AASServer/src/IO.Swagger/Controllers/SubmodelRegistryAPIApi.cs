/*
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 *
 * All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"
 *
 * OpenAPI spec version: V3.0.1aasserver-5d7bbc9d-rgbgn
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using Newtonsoft.Json;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Azure.DigitalTwins.Core;
using Azure;

namespace IO.Swagger.Controllers
{


    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SubmodelRegistryAPIApiController : Controller
    {
        //JWT Token 
        public class Token
        {
            public String sub { get; set; }
            public String aut { get; set; }
            public String aud { get; set; }
            public String nbf { get; set; }
            public String azp { get; set; }
            public String scope { get; set; }
            public String iss { get; set; }
            public String exp { get; set; }
            public String iat { get; set; }
            public String jti { get; set; }
            public String location {get; set;}
            public String uri {get; set;}  
            public Token() { }
        }

        //Function to decode JWT token
        private Token decodeToken(String token)
        {
            String str = token.Substring(token.IndexOf(".") + 1, token.LastIndexOf(".") - token.IndexOf(".") - 1);
            if (str.Length % 4 != 0)
                str += new String('=', 4 - str.Length % 4);

            byte[] data = Convert.FromBase64String(str);
            string decodedString = System.Text.Encoding.UTF8.GetString(data);
            Token jwt = JsonConvert.DeserializeObject<Token>(decodedString);


            return jwt;
        }

        //Get the subject attributes for a twin from the ADT model
        private String getSubjectAttribute(BasicDigitalTwin twin)
        {
            String query = "SELECT DT.$dtId FROM DIGITALTWINS twin JOIN DT RELATED twin.targetSubjectAttributes WHERE twin.$dtId = '" + twin.Id + "AccessControlPermissions'";

            // get the permissions from subject attriubtes for the submodel
            Pageable<BasicDigitalTwin> attributeResponse = Program.dtClient.Query<BasicDigitalTwin>(query);
            String subjectAttribute = "";
            if (attributeResponse != null)
            {

                foreach (BasicDigitalTwin attribute in attributeResponse)
                {
                    subjectAttribute += " " + attribute.Id;
                }


            }
            else subjectAttribute = "default";
            return subjectAttribute;
        }

        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel
        /// </summary>
        /// <param name="submodelIdentifier">The Submodelâ€™s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Submodel Descriptor deleted successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpDelete]
        [Route("/api/v3.0/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubmodelDescriptorById")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        public virtual IActionResult DeleteSubmodelDescriptorById([FromRoute][Required] string submodelIdentifier)
        {
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns all Submodel Descriptors
        /// </summary>
        /// <param name="limit">The maximum number of elements in the response array</param>
        /// <param name="cursor">A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue</param>
        /// <response code="200">Requested Submodel Descriptors</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/submodel-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelDescriptors")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetSubmodelDescriptorsResult), description: "Requested Submodel Descriptors")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAllSubmodelDescriptors([FromQuery] int? limit, [FromQuery] string cursor, [FromHeader] String Authorization)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetSubmodelElementsValueResult));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            String res = "{\"result\": [";


            String query = "SELECT $dtId FROM  DigitalTwins  where $metadata.$model = 'dtmi:digitaltwins:aas:Submodel;1'";

            // Must be authorized using header
            if (Authorization == null)
                return StatusCode(401, default(Result));



            // we need to decode and check
            Token token = decodeToken(Authorization);

            try
            {

                Pageable<BasicDigitalTwin> twinResponse = Program.dtClient.Query<BasicDigitalTwin>(query);

                if (twinResponse != null)
                {

                    foreach (BasicDigitalTwin twin in twinResponse)
                    {
                        String subjectAttribute = getSubjectAttribute(twin);

                        // check to authorize access
                        if (subjectAttribute.Equals("") || (( token.location == null || subjectAttribute.Contains(token.location)) &&
                            ( token.uri == null || subjectAttribute.Contains(token.uri))  && subjectAttribute.Contains(token.scope)))
                        {

                            Console.WriteLine("Authorized: " + subjectAttribute);
  

                            if (twin.Id != null)
                            {

                                Subject uudexSub = null;
                                foreach (Subject sub in Program.uudexSubjects)
                                {
                                    if (sub.subject_name.Contains(twin.Id))
                                    {
                                        uudexSub = sub;
                                        
                                    }
                                }
                                
                                res += "{\"id\":\"" + twin.Id.ToString();
                                res += "\", \"endpoints\": [ {\"href\": {\"href\": \"https://chessapim.umbrellaiot.com/aas/3.0/aas/submodels/" + twin.Id.ToString();
                                if (twin.Id.ToString().EndsWith("telemetry") && uudexSub != null)
                                {
                                     res += "\", \"endpointProtocol\": \"HTTP\", \"endpointProtocolVersion\": [  \"1.1\" ] }, \"interface\": \"AAS-3.0\" }, { \"protocolInformation\": {\"href\": \"https://chessapim.umbrellaiot.com/uudexapi/1.0\", \"endpointProtocol\":\"UUDEX\", \"endpointProtocolVersion\": [  \"1.0\" ], \"endpointTopic\":\"" + uudexSub.subscription.subject_uuid +"\" }, \"interface\": \"AAS-3.0\" }]},";
                                }
                                else res += "\", \"endpointProtocol\": \"HTTP\", \"endpointProtocolVersion\": [  \"1.1\" ] }, \"interface\": \"AAS-3.0\" }]},";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
                return this.NotFound(ex);
            }

            return Json(JsonConvert.DeserializeObject(res.Trim(',') + "]}"));

        }

        /// <summary>
        /// Returns a specific Submodel Descriptor
        /// </summary>
        /// <param name="submodelIdentifier">The Submodelâ€™s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Submodel Descriptor</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v3.0/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelDescriptorById")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelDescriptor), description: "Requested Submodel Descriptor")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetSubmodelDescriptorById([FromRoute][Required] string submodelIdentifier, [FromHeader] String Authorization)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetSubmodelElementsValueResult));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            String res = "{\"result\": [";


            String query = "SELECT $dtId FROM  DigitalTwins  where $metadata.$model = 'dtmi:digitaltwins:aas:Submodel;1' and $dtId = '" + submodelIdentifier + "'";

            // Must be authorized using header
            if (Authorization == null)
                return StatusCode(401, default(Result));



            // we need to decode and check
            Token token = decodeToken(Authorization);

            try
            {

                Pageable<BasicDigitalTwin> twinResponse = Program.dtClient.Query<BasicDigitalTwin>(query);

                if (twinResponse != null)
                {

                    foreach (BasicDigitalTwin twin in twinResponse)
                    {
                        String subjectAttribute = getSubjectAttribute(twin);

                        // check to authorize access
                        if (subjectAttribute.Equals("") || (( token.location == null || subjectAttribute.Contains(token.location)) &&
                            ( token.uri == null || subjectAttribute.Contains(token.uri))  && subjectAttribute.Contains(token.scope)))
                        {

                            Console.WriteLine("Authorized: " + subjectAttribute);


                            if (twin.Id != null)
                            {
                                 Subject uudexSub = null;
                                foreach (Subject sub in Program.uudexSubjects)
                                {
                                    if (sub.subject_name.Contains(twin.Id))
                                    {
                                        uudexSub = sub;
                                        
                                    }
                                }
                                
                                res += "{\"id\":\"" + twin.Id.ToString();
                                res += "\", \"endpoints\": [ {\"href\": {\"href\": \"http://chessapim.umbrellaiot.com/aas/3.0/aas/submodels/" + twin.Id.ToString();
                                if (twin.Id.ToString().EndsWith("telemetry") && uudexSub != null)
                                {
                                     res += "\", \"endpointProtocol\": \"HTTP\", \"endpointProtocolVersion\": [  \"1.1\" ] }, \"interface\": \"AAS-3.0\" }, { \"protocolInformation\": {\"href\": \"https://chessapim.umbrellaiot.com/uudexapi/1.0\", \"endpointProtocol\":\"UUDEX\", \"endpointProtocolVersion\": [  \"1.0\" ], \"endpointTopic\":\"" +  uudexSub.subscription.subject_uuid  +"\" }, \"interface\": \"AAS-3.0\" }]},";
                                } 
                                else res += "\", \"endpointProtocol\": \"HTTP\", \"endpointProtocolVersion\": [  \"1.1\" ] }, \"interface\": \"AAS-3.0\" }]},";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
                return this.NotFound(ex);
            }

            return Json(JsonConvert.DeserializeObject(res.Trim(',') + "]}"));

        }

        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel
        /// </summary>
        /// <param name="body">Submodel Descriptor object</param>
        /// <response code="201">Submodel Descriptor created successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="409">Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("/api/v3.0/submodel-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelDescriptor")]
        [SwaggerResponse(statusCode: 201, type: typeof(SubmodelDescriptor), description: "Submodel Descriptor created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 409, type: typeof(Result), description: "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult PostSubmodelDescriptor([FromBody] SubmodelDescriptor body)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(SubmodelDescriptor));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));
            string exampleJson = null;
            exampleJson = "\"{ \\\"id\\\": \\\"https://admin-shell.io/zvei/nameplate/1/0/Nameplate\\\", \\\"endpoints\\\": [ { \\\"href\\\": { \\\"href\\\": \\\"https://localhost:1234/api/v3.0/submodel\\\", \\\"endpointProtocol\\\": \\\"HTTP\\\", \\\"endpointProtocolVersion\\\": [\\\"1.1\\\"] }, \\\"interface\\\": \\\"AAS-3.0\\\" }, { \\\"protocolInformation\\\": { \\\"href\\\": \\\"opc.tcp://localhost:4840\\\" }, \\\"interface\\\": \\\"AAS-3.0\\\" }, { \\\"protocolInformation\\\": { \\\"href\\\": \\\"https://localhost:5678\\\", \\\"endpointProtocol\\\": \\\"HTTP\\\", \\\"endpointProtocolVersion\\\": [\\\"1.1\\\"], \\\"subprotocol\\\": \\\"OPC UA Basic SOAP\\\", \\\"subprotocolBody\\\": \\\"ns=2;s=MyAAS\\\", \\\"subprotocolBodyEncoding\\\": \\\"application/soap+xml\\\" }, \\\"interface\\\": \\\"AAS-3.0\\\" } ] }\"";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SubmodelDescriptor>(exampleJson)
            : default(SubmodelDescriptor);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing Submodel Descriptor
        /// </summary>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="submodelIdentifier">The Submodelâ€™s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Submodel Descriptor updated successfully</response>
        /// <response code="400">Bad Request, e.g. the request parameters of the format of the request body is wrong.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("/api/v3.0/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutSubmodelDescriptorById")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request, e.g. the request parameters of the format of the request body is wrong.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Result), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Result), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult PutSubmodelDescriptorById([FromBody] SubmodelDescriptor body, [FromRoute][Required] string submodelIdentifier)
        {
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Result));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Result));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Result));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Result));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Result));

            throw new NotImplementedException();
        }
    }
}
